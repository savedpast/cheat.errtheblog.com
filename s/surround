<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>INTRODUCTION                                    *surround*

This plugin is a tool for dealing with pairs of &quot;surroundings.&quot;  Examples
of surroundings include parentheses, quotes, and HTML tags.  They are
closely related to what Vim refers to as |text-objects|.  Provided
are mappings to allow for removing, changing, and adding surroundings.

Details follow on the exact semantics, but first, consider the following
examples.  An asterisk (*) is used to denote the cursor position.

  Old text                  Command     New text ~
  &quot;Hello *world!&quot;           ds&quot;         Hello world!
  [123+4*56]/2              cs])        (123+456)/2
  &quot;Look ma, I'm *HTML!&quot;     cs&quot;&lt;q&gt;      &lt;q&gt;Look ma, I'm HTML!&lt;/q&gt;
  if *x&gt;3 {                 ysW(        if ( x&gt;3 ) {
  my $str = *whee!;         vlllls'     my $str = 'whee!';

While a few features of this plugin will work in older versions of Vim,
Vim 7 is recommended for full functionality.

MAPPINGS                                        *surround-mappings*

Delete surroundings is *ds* .  The next character given determines the target
to delete.  The exact nature of the target is explained in |surround-targets|
but essentially it is the last character of a |text-object|.  This mapping
deletes the difference between the &quot;i&quot;nner object and &quot;a&quot;n object.  This is
easiest to understand with some examples:

  Old text                  Command     New text ~
  &quot;Hello *world!&quot;           ds&quot;         Hello world!
  (123+4*56)/2              ds)         123+456/2
  &lt;div&gt;Yo!*&lt;/div&gt;           dst         Yo!

Change surroundings is *cs* .  It takes two arguments, a target like with
|ds|, and a replacement.  Details about the second argument can be found
below in |surround-replacements|.  Once again, examples are in order.

  Old text                  Command     New text ~
  &quot;Hello *world!&quot;           cs&quot;'        'Hello world!'
  &quot;Hello *world!&quot;           cs&quot;&lt;q&gt;      &lt;q&gt;Hello world!&lt;/q&gt;
  (123+4*56)/2              cs)]        [123+456]/2
  (123+4*56)/2              cs)[        [ 123+456 ]/2
  &lt;div&gt;Yo!*&lt;/div&gt;           cst&lt;p&gt;      &lt;p&gt;Yo!&lt;/p&gt;

*ys* takes a valid Vim motion or text object as the first object, and wraps
it using the second argument as with |cs|.  (It's a stretch, but a good
mnemonic for &quot;ys&quot; is &quot;you surround&quot;.)

  Old text                  Command     New text ~
  Hello w*orld!             ysiw)       Hello (world)!

As a special case, *yss* operates on the current line, ignoring leading
whitespace.

  Old text                  Command     New text ~
      Hello w*orld!         yssB            {Hello world!}

There is also *yS* and *ySS* which indent the surrounded text and place it
on a line of its own.

In visual mode, a simple &quot;s&quot; with an argument wraps the selection.  This is
referred to as the *vS* mapping, although ordinarily there will be
additional keystrokes between the v and s.  In linewise visual mode, the
surroundings are placed on separate lines and indented.  In blockwise visual
mode, each line is surrounded.

A &quot;gS&quot; in visual mode, known as *vgS* , behaves similarly.  In linewise visual
mode, the automatic indenting is surpressed.  In blockwise visual mode, this
enables surrounding past the end of the like with 'virtualedit' set (there
seems to be no way in Vim Script to differentiate between a jagged end of line
selection and a virtual block selected past the end of the line, so two maps
were needed).</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>