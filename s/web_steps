<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre># IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a 
# newer version of cucumber-rails. Consider adding your own code to a new file 
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.


require 'uri'
require File.expand_path(File.join(File.dirname(__FILE__), &quot;..&quot;, &quot;support&quot;, &quot;paths&quot;))

# Commonly used webrat steps
# http://github.com/brynary/webrat

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press &quot;([^\&quot;]*)&quot;$/ do |button|
  click_button(button)
end

When /^(?:|I )follow &quot;([^\&quot;]*)&quot;$/ do |link|
  click_link(link)
end

When /^(?:|I )follow &quot;([^\&quot;]*)&quot; within &quot;([^\&quot;]*)&quot;$/ do |link, parent|
  click_link_within(parent, link)
end

When /^(?:|I )fill in &quot;([^\&quot;]*)&quot; with &quot;([^\&quot;]*)&quot;$/ do |field, value|
  fill_in(field, :with =&gt; value)
end

When /^(?:|I )fill in &quot;([^\&quot;]*)&quot; for &quot;([^\&quot;]*)&quot;$/ do |value, field|
  fill_in(field, :with =&gt; value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in &quot;#{name}&quot; with &quot;#{value}&quot;}
  end
end

When /^(?:|I )select &quot;([^\&quot;]*)&quot; from &quot;([^\&quot;]*)&quot;$/ do |value, field|
  select(value, :from =&gt; field)
end

# Use this step in conjunction with Rail's datetime_select helper. For example:
# When I select &quot;December 25, 2008 10:00&quot; as the date and time
When /^(?:|I )select &quot;([^\&quot;]*)&quot; as the date and time$/ do |time|
  select_datetime(time)
end

# Use this step when using multiple datetime_select helpers on a page or
# you want to specify which datetime to select. Given the following view:
#   &lt;%= f.label :preferred %&gt;&lt;br /&gt;
#   &lt;%= f.datetime_select :preferred %&gt;
#   &lt;%= f.label :alternative %&gt;&lt;br /&gt;
#   &lt;%= f.datetime_select :alternative %&gt;
# The following steps would fill out the form:
# When I select &quot;November 23, 2004 11:20&quot; as the &quot;Preferred&quot; date and time
# And I select &quot;November 25, 2004 10:30&quot; as the &quot;Alternative&quot; date and time
When /^(?:|I )select &quot;([^\&quot;]*)&quot; as the &quot;([^\&quot;]*)&quot; date and time$/ do |datetime, datetime_label|
  select_datetime(datetime, :from =&gt; datetime_label)
end

# Use this step in conjunction with Rail's time_select helper. For example:
# When I select &quot;2:20PM&quot; as the time
# Note: Rail's default time helper provides 24-hour time-- not 12 hour time. Webrat
# will convert the 2:20PM to 14:20 and then select it.
When /^(?:|I )select &quot;([^\&quot;]*)&quot; as the time$/ do |time|
  select_time(time)
end

# Use this step when using multiple time_select helpers on a page or you want to
# specify the name of the time on the form.  For example:
# When I select &quot;7:30AM&quot; as the &quot;Gym&quot; time
When /^(?:|I )select &quot;([^\&quot;]*)&quot; as the &quot;([^\&quot;]*)&quot; time$/ do |time, time_label|
  select_time(time, :from =&gt; time_label)
end

# Use this step in conjunction with Rail's date_select helper.  For example:
# When I select &quot;February 20, 1981&quot; as the date
When /^(?:|I )select &quot;([^\&quot;]*)&quot; as the date$/ do |date|
  select_date(date)
end

# Use this step when using multiple date_select helpers on one page or
# you want to specify the name of the date on the form. For example:
# When I select &quot;April 26, 1982&quot; as the &quot;Date of Birth&quot; date
When /^(?:|I )select &quot;([^\&quot;]*)&quot; as the &quot;([^\&quot;]*)&quot; date$/ do |date, date_label|
  select_date(date, :from =&gt; date_label)
end

When /^(?:|I )check &quot;([^\&quot;]*)&quot;$/ do |field|
  check(field)
end

When /^(?:|I )uncheck &quot;([^\&quot;]*)&quot;$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose &quot;([^\&quot;]*)&quot;$/ do |field|
  choose(field)
end

# Adds support for validates_attachment_content_type. Without the mime-type getting
# passed to attach_file() you will get a &quot;Photo file is not one of the allowed file types.&quot;
# error message 
When /^(?:|I )attach the file &quot;([^\&quot;]*)&quot; to &quot;([^\&quot;]*)&quot;$/ do |path, field|
  type = path.split(&quot;.&quot;)[1]

  case type
  when &quot;jpg&quot;
    type = &quot;image/jpg&quot; 
  when &quot;jpeg&quot;
    type = &quot;image/jpeg&quot; 
  when &quot;png&quot;
    type = &quot;image/png&quot; 
  when &quot;gif&quot;
    type = &quot;image/gif&quot;
  end
  
  attach_file(field, path, type)
end

Then /^(?:|I )should see &quot;([^\&quot;]*)&quot;$/ do |text|
  if defined?(Spec::Rails::Matchers)
    response.should contain(text)
  else
    assert_contain text
  end
end

Then /^(?:|I )should see &quot;([^\&quot;]*)&quot; within &quot;([^\&quot;]*)&quot;$/ do |text, selector|
  within(selector) do |content|
    if defined?(Spec::Rails::Matchers)
      content.should contain(text)
    else
      assert content.include?(text)
    end
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  if defined?(Spec::Rails::Matchers)
    response.should contain(regexp)
  else
    assert_contain regexp
  end
end

Then /^(?:|I )should see \/([^\/]*)\/ within &quot;([^\&quot;]*)&quot;$/ do |regexp, selector|
  within(selector) do |content|
    regexp = Regexp.new(regexp)
    if defined?(Spec::Rails::Matchers)
      content.should contain(regexp)
    else
      assert content =~ regexp
    end
  end
end

Then /^(?:|I )should not see &quot;([^\&quot;]*)&quot;$/ do |text|
  if defined?(Spec::Rails::Matchers)
    response.should_not contain(text)
  else
    assert_not_contain text
  end
end

Then /^(?:|I )should not see &quot;([^\&quot;]*)&quot; within &quot;([^\&quot;]*)&quot;$/ do |text, selector|
  within(selector) do |content|
    if defined?(Spec::Rails::Matchers)
        content.should_not contain(text)
    else
        assert !content.include?(text)
    end
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  if defined?(Spec::Rails::Matchers)
    response.should_not contain(regexp)
  else
    assert_not_contain regexp
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/ within &quot;([^\&quot;]*)&quot;$/ do |regexp, selector|
  within(selector) do |content|
    regexp = Regexp.new(regexp)
    if defined?(Spec::Rails::Matchers)
      content.should_not contain(regexp)
    else
      assert content !~ regexp
    end
  end
end

Then /^the &quot;([^\&quot;]*)&quot; field should contain &quot;([^\&quot;]*)&quot;$/ do |field, value|
  if defined?(Spec::Rails::Matchers)
    field_labeled(field).value.should =~ /#{value}/
  else
    assert_match(/#{value}/, field_labeled(field).value)
  end
end

Then /^the &quot;([^\&quot;]*)&quot; field should not contain &quot;([^\&quot;]*)&quot;$/ do |field, value|
  if defined?(Spec::Rails::Matchers)
    field_labeled(field).value.should_not =~ /#{value}/
  else
    assert_no_match(/#{value}/, field_labeled(field).value)
  end
end

Then /^the &quot;([^\&quot;]*)&quot; checkbox should be checked$/ do |label|
  if defined?(Spec::Rails::Matchers)
    field_labeled(label).should be_checked
  else
    assert field_labeled(label).checked?
  end
end

Then /^the &quot;([^\&quot;]*)&quot; checkbox should not be checked$/ do |label|
  if defined?(Spec::Rails::Matchers)
    field_labeled(label).should_not be_checked
  else
    assert !field_labeled(label).checked?
  end
end

Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).select(:path, :query).compact.join('?')
  if defined?(Spec::Rails::Matchers)
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^show me the page$/ do
  save_and_open_page
end</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>