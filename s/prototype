<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>Utility Methods:

$(id | element) -&gt; HTMLElement
$((id | element)...) -&gt; [HTMLElement...]
If provided with a string, returns the element in the document with matching ID; otherwise returns the passed element. Takes in an arbitrary number of arguments. All elements returned by the function are extended with Prototype DOM extensions.

$$(cssRule...) -&gt; [HTMLElement...]
Takes an arbitrary number of CSS selectors (strings) and returns a document-order array of extended DOM elements that match any of them.

$A(iterable) -&gt; actualArray
Accepts an array-like collection (anything with numeric indices) and returns its equivalent as an actual Array object. This method is a convenience alias of Array.from, but is the preferred way of casting to an Array.

$F(element) -&gt; value
Returns the value of a form control. This is a convenience alias of Form.Element.getValue. Refer to it for full details.

$H([obj]) -&gt; Hash
Creates a Hash (which is synonymous to “map” or “associative array” for our purposes). A convenience wrapper around the Hash constructor, with a safeguard that lets you pass an existing Hash object and get it back untouched (instead of uselessly cloning it).

$R(start, end[, exclusive = false]) -&gt; ObjectRange
Creates a new ObjectRange object. This method is a convenience wrapper around the ObjectRange constructor, but $R is the preferred alias.

$w(String) -&gt; Array
Splits a string into an Array, treating all whitespace as delimiters. Equivalent to Ruby's %w{foo bar} or Perl's qw(foo bar).



Element

new Element(tagName[, attributes])
var a = new Element('a', { 'class': 'foo', href: '/foo.html' }).update(&quot;Next page&quot;);
Constructor creates new element.

absolutize(element) -&gt; HTMLElement
Turns element into an absolutely-positioned element without changing its position in the page layout.

addClassName(element, className) -&gt; HTMLElement 
Adds a CSS class to element.

addMethods([methods])
addMethods(tagName, methods)
Takes a hash of methods and makes them available as methods of extended elements and of the Element object. The second usage form is for targeting a specific HTML element.

Element.adjacent(element[, selectors...]) -&gt; [HTMLElement...]
someElement.adjacent([selectors...]) -&gt; [HTMLElement...]
Finds all siblings of the current element that match the given selector(s).

ancestors(element) -&gt; [HTMLElement...]
Collects all of element’s ancestors and returns them as an array of extended elements.

childElements(element) -&gt; [HTMLElement...]
Collects all of the element's children and returns them as an array of extended elements.

cleanWhitespace(element) -&gt; HTMLElement
Removes all of element's text nodes which contain only whitespace. Returns element.

clonePosition(element, source[, options]) -&gt; HTMLElement
Clones the position and/or dimensions of source onto element as defined by the optional argument options.

cumulativeOffset(element) -&gt; [Number, Number] also accessible as { left: Number, top: Number }
Returns the offsets of element from the top left corner of the document.

cumulativeScrollOffset(element) -&gt; [Number, Number] also accessible as { left: Number, top: Number }
Calculates the cumulative scroll offset of an element in nested scrolling containers.

descendantOf(element, ancestor) -&gt; Boolean 
Checks if element is a descendant of ancestor.

descendants(element) -&gt; [HTMLElement...]
Collects all of element’s descendants and returns them as an array of extended elements.

down(element[, cssRule][, index = 0]) -&gt; HTMLElement | undefined
Returns element’s first descendant (or the n-th descendant if index is specified) that matches cssRule. If no cssRule is provided, all descendants are considered. If no descendant matches these criteria, undefined is returned.

empty(element) -&gt; Boolean
Tests whether element is empty (i.e. contains only whitespace).

extend(element)
Extends element with all of the methods contained in Element.Methods and Element.Methods.Simulated. If element is an input, textarea or select tag, it will also be extended with the methods from Form.Element.Methods. If it is a form tag, it will also be extended with Form.Methods.

fire(eventName[, memo]) -&gt; Event
Fires a custom event with the current element as its target.

firstDescendant(element) -&gt; HTMLElement
Returns the first child that is an element. This is opposed to firstChild DOM property which will return any node (whitespace in most usual cases).

getDimensions(element) -&gt; {height: Number, width: Number}
Finds the computed width and height of element and returns them as key/value pairs of an object.

getHeight(element) -&gt; Number
Finds and returns the computed height of element.

getOffsetParent(element) -&gt; HTMLElement
Returns element’s closest positioned ancestor. If none is found, the body element is returned.

getStyle(element, property) -&gt; String | null
Returns the given CSS property value of element. property can be specified in either of its CSS or camelized form.

getWidth(element) -&gt; Number
Finds and returns the computed width of element.

hasClassName(element, className) -&gt; Boolean
Checks whether element has the given CSS className.

hide(element) -&gt; HTMLElement
Hides and returns element.

identify(element) -&gt; id
returns element’s id attribute if it exists, or sets and returns a unique, auto-generated id.

insert(element, { position: content }) -&gt; HTMLElement
insert(element, content) -&gt; HTMLElement
Inserts content before, after, at the top of, or at the bottom of element, as specified by the position property of the second argument. If the second argument is the content itself, insert will append it to element.
inspect

inspect(element) -&gt; String
Returns the debug-oriented string representation of element.

makeClipping(element) -&gt; HTMLElement
Simulates the poorly supported CSS clip property by setting element's overflow value to 'hidden'. Returns element.

makePositioned(element) -&gt; HTMLElement
Allows for the easy creation of CSS containing block by setting element's CSS position to 'relative' if its initial position is either 'static' or undefined. Returns element.

match(element, selector) -&gt; Boolean
Checks if element matches the given CSS selector.

next(element[, cssRule][, index = 0]) -&gt; HTMLElement | undefined
Returns element’s following sibling (or the index’th one, if index is specified) that matches cssRule. If no cssRule is provided, all following siblings are considered. If no following sibling matches these criteria, undefined is returned.

nextSiblings(element) -&gt; [HTMLElement...]
Collects all of element’s next siblings and returns them as an array of extended elements.

Element.observe(element, eventName, handler) -&gt; HTMLElement
someElement.observe(eventName, handler) -&gt; HTMLElement
Registers an event handler on element and returns element.

positionedOffset(element) -&gt; [Number, Number] also accessible as { left: Number, top: Number }
Returns element’s offset relative to its closest positioned ancestor (the element that would be returned by Element#getOffsetParent).

previous(element[, cssRule][, index = 0]) -&gt; HTMLElement | undefined
Returns element's previous sibling (or the index'th one, if index is specified) that matches cssRule. If no cssRule is provided, all previous siblings are considered. If no previous sibling matches these criteria, undefined is returned.

previousSiblings(element) -&gt; [HTMLElement...]
Collects all of element’s previous siblings and returns them as an array of extended elements.

readAttribute(element, attribute) -&gt; String | null
Returns the value of element's attribute or null if attribute has not been specified.

recursivelyCollect(element, property) -&gt; [HTMLElement...]
Recursively collects elements whose relationship is specified by property. property has to be a property (a method won’t do!) of element that points to a single DOM node. Returns an array of extended elements.

relativize(element) -&gt; HTMLElement
Turns element into an relatively-positioned element without changing its position in the page layout.

remove(element) -&gt; HTMLElement
Completely removes element from the document and returns it.

removeClassName(element, className) -&gt; HTMLElement
Removes element’s CSS className and returns element.

replace(element[, html]) -&gt; HTMLElement
Replaces element by the content of the html argument and returns the removed element.

scrollTo(element) -&gt; HTMLElement
Scrolls the window so that element appears at the top of the viewport. Returns element.

select(element, selector...) -&gt; [HTMLElement...]
Takes an arbitrary number of CSS selectors (strings) and returns an array of extended descendants of element that match any of them.

Element.setOpacity(element, opacity) -&gt; [HTMLElement...]
someElement.setOpacity(opacity) -&gt; [HTMLElement...]
Sets the visual opacity of an element while working around inconsistencies in various browsers. The opacity argument should be a floating point number, where the value of 0 is fully transparent and 1 is fully opaque.

setStyle(element, styles) -&gt; HTMLElement
Modifies element’s CSS style properties. Styles are passed as a hash of property-value pairs in which the properties are specified in their camelized form.

show(element) -&gt; HTMLElement
Displays and returns element.

siblings(element) -&gt; [HTMLElement...]
Collects all of element’s siblings and returns them as an array of extended elements.

stopObserving(element, eventName, handler) -&gt; HTMLElement
Unregisters handler and returns element.

toggle(element) -&gt; HTMLElement
Toggles the visibility of element.

toggleClassName(element, className) -&gt; HTMLElement
Toggles element’s CSS className and returns element.

undoClipping(element) -&gt; HTMLElement
Sets element’s CSS overflow property back to the value it had before Element.makeClipping() was applied. Returns element.

undoPositioned(element) -&gt; HTMLElement
Sets element back to the state it was before Element.makePositioned was applied to it. Returns element.

up(element, [cssRule][, index = 0]) -&gt; HTMLElement | undefined
Returns element’s first ancestor (or the index’th ancestor, if index is specified) that matches cssRule. If no cssRule is provided, all ancestors are considered. If no ancestor matches these criteria, undefined is returned.

update(element[, newContent]) -&gt; HTMLElement
Replaces the content of element with the provided newContent argument and returns element.

viewportOffset(element) -&gt; [Number, Number] also accessible as { left: Number, top: Number }
Returns the X/Y coordinates of element relative to the viewport.

visible(element) -&gt; Boolean
Returns a Boolean indicating whether or not element is visible (i.e. whether its inline style property is set to &quot;display: none;&quot;).

Element.wrap(element, wrapper[, attributes]) -&gt; HTMLElement
someElement.wrap(wrapper[, attributes]) -&gt; HTMLElement
Wraps an element inside another, then returns the wrapper.

writeAttribute(element, attribute[, value = true]) -&gt; HTMLElement
writeAttribute(element, attributes) -&gt; HTMLElement
Adds, specifies or removes attributes passed as either a hash or a name/value pair.


 	 
Form Functions	 

$F(fieldname);
  Return the value of the form element, whether it is a text input, textarea, select box or checkbox. If it is a checkbox, it will return undefined if unchecked. Radio groups dont work.
Form.getElements(formID);
  Returns an array of all the form elements for form formID
Form.serialize(formID);
  Returns a formatted URL containing all the elements in the form, similar to &amp;field=value&amp;field2=othervalue
Form.focusFirstElement(formID);	
  Will set focus on the first form element.

 	 
Exception Handling	 

Try.these(
       function(){  
            // errors 
       }, 
       function(){
            // other stuff
       }
);
  Allows you to execute the second function if the first one fails. 
  Kinda like try/catch, except it doesn't make any sense.

                       	 
Ajax

function ajaxMe( theUrl, data ){
   var ajaxRequest = new Ajax.Request(
     theUrl,{method: post, parameters: data, onComplete: theResponse});
}

function theResponse(origRequest){
    alert(origRequest.responseText);
}

Classes

var Butter = Class.create({
  initialize: function(brand) {
    this.brand = brand;
    this.melted = false;
  },
  melt: function() {
    this.melted = true;
  }
})
var parkay = new Butter('Parkay');

  Prototype gives you a way to create classes. If you want, you
  can define an initialize function that will be called when
  instances of the class are created.</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>