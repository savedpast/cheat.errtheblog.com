<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>Note: This cheat is mostly copied from the eclim cheatsheet online available here: http://eclim.sourceforge.net/vim/cheatsheet.html. It's been cut down to just include the parts applicable to Java development.

Global Commands

    * :PingEclim - Pings eclimd server.
    * :ShutdownEclim - Shuts down eclimd server.
    * :EclimSettings - View / edit global settings.
    * :EclimDisable - Temporarily disables communication with eclimd.
    * :EclimEnable - Re-enables communication with eclimd.
    * :EclimHelp [helptopic] - View eclim documentation in vim.
    * :EclimHelpGrep /regex/ - Search the eclim documentation in vim.

Project Commands

    * :ProjectCreate &lt;folder&gt; [-p &lt;project_name&gt;] -n &lt;nature&gt; ... [-d &lt;project_dependency&gt; ...] Create a new project.
    * :ProjectList - List current projects.
    * :ProjectSettings [&lt;project&gt;] - View / edit project settings.
    * :ProjectDelete &lt;project&gt; - Delete a project.
    * :ProjectRefresh [&lt;project&gt; &lt;project&gt; ...] - Refresh supplied list of projects against the current files on disk. If no project names supplied, refresh the current project.
    * :ProjectRefreshAll - Refresh all projects.
    * :ProjectInfo [&lt;project&gt;] - Echos info for the current or supplied project.
    * :ProjectOpen &lt;project&gt; - Opens a project.
    * :ProjectClose &lt;project&gt; - Closes a project.
    * :ProjectNatures [&lt;project&gt;] - View the configured natures for one or all projects.
    * :ProjectNatureAdd &lt;project&gt; [&lt;nature&gt; ...] - Add one or more natures to a project.
    * :ProjectNatureRemove &lt;project&gt; [&lt;nature&gt; ...] - Remove one or more natures from a project.
    * :ProjectCD - Changes the global current working directory to the root directory of the current file’s project (executes a :cd).
    * :ProjectLCD - Changes the current working directory of the current window to the root directory of the current file’s project (executes a :lcd).
    * :ProjectTree [&lt;project&gt; &lt;project&gt; ...] - Opens navigable a tree for one or more projects.
    * :ProjectsTree - Opens a tree containing all projects.
    * :ProjectGrep /&lt;pattern&gt;/ file_pattern [file_pattern ...] - Issues a vimgrep starting at the root of the current project.
    * :ProjectGrepAdd /&lt;pattern&gt;/ file_pattern [file_pattern ...] - Issues a vimgrepadd starting at the root of the current project.
    * :ProjectLGrep /&lt;pattern&gt;/ file_pattern [file_pattern ...] - Issues a lvimgrep starting at the root of the current project.
    * :ProjectLGrepAdd /&lt;pattern&gt;/ file_pattern [file_pattern ...] - Issues a lvimgrepadd starting at the root of the current project.
    * :TrackerTicket &lt;ticket_id&gt; - Opens the supplied ticket in your configured web based tracking tool.
    * :ProjectTodo - Searches project files for todo / fixme patterns and adds them to the location list.
    * :Todo - Searches the current file for todo / fixme patterns and adds them to the location list.

Ant Commands

    * :Ant [&lt;target&gt; ...] - Execute ant from the current project.
    * :AntDoc [&lt;element&gt;] - Find and open the documentation for the element under the cursor or the element supplied as an argument.
    * :Validate - Validate the current ant build file.

Java Commands

    * :JavaGet - Create a java bean getter method.
    * :JavaSet - Create a java bean setter method.
    * :JavaGetSet - Create both a java bean getter and setter method.
    * :JavaConstructor - Creates class constructor, either empty or based on selected class fields.
    * :JavaImpl - View implementable / overridable methods from super classes and implemented interfaces.
    * :JavaDelegate - View list of methods that delegate to the field under the cursor.
    * Generating test method stubs. - Similar to :JavaImpl, but creates test methods.
    * Executing test cases and viewing the results. - [testcase] Allows you to execute test cases in your favorite build tool.
    * Executing test cases and viewing the results. - [testcase] Allows you to view the results of a test case.
    * :JavaImport - Import the class under the cursor.
    * :JavaSearch [-p &lt;pattern&gt;] [-t &lt;type&gt;] [-x &lt;context&gt;] [-s &lt;scope&gt;] - Search for classes, methods, fields, etc. (With pattern supplied, searches for the element under the cursor).
    * :JavaSearchContext - Perform a context sensitive search for the element under the cursor.
    * :JavaCorrect - Suggest possible corrections for a source error.
    * :JavaRegex - Opens a window for testing java regular expressions.
    * :JavaDocSearch - Search for javadocs. Same usage as :JavaSearch.
    * :JavaDocComment - Adds or updates the comments for the element under the cursor.
    * :JavaFormat - Formats java source code.
    * :Checkstyle - Invokes checkstyle on the current file.
    * :Jps - Opens window with information about the currently running java processes.
    * :Validate - Manually runs source code validation.

Java .classpath Commands

    * :NewSrcEntry &lt;dir&gt; [&lt;dir&gt; ...] - Add a new source dir entry.
    * :NewProjectEntry &lt;project&gt; [&lt;project&gt; ...] - Add a new project entry.
    * :NewJarEntry &lt;file&gt; [&lt;file&gt; ...] - Add a jar entry.
    * :NewVarEntry &lt;VAR/file&gt; [&lt;VAR/file&gt; ...] - Add a new var entry.
    * :VariableList List available classpath variables and their corresponding values.
    * :VariableCreate &lt;name&gt; &lt;path&gt; - Creates or updates the variable with the supplied name.
    * :VariableDelete &lt;name&gt; - Deletes the variable with the supplied name.

Vim Commands

    * :FindCommandDef [&lt;command&gt;] - Finds a command definition.
    * :FindCommandRef [&lt;command&gt;] - Finds references of a command.
    * :FindFunctionDef [&lt;function&gt;] - Finds a function definition.
    * :FindFunctionRef [&lt;function&gt;] - Finds references of a function.
    * :FindVariableDef [&lt;variable&gt;] - Finds the definition of a global variable.
    * :FindVariableRef [&lt;variable&gt;] - Finds references of a global variable.
    * :FindByContext - Finds command, function, or variable based on the context of the element under the cursor.
    * :VimDoc [&lt;keyword&gt;] - Opens the vim help for a keyword.

Version Control Commands

Note: Currently cvs, subversion, mercurial, and git are supported by the following commands where applicable.

    * :VcsAnnotate - Toggles annotation of the currently versioned file using vim signs.
    * :VcsInfo - Echos vcs info about the current versioned file.
    * :VcsLog - Opens a buffer with log information for the current file.
    * :VcsChangeSet [revision] - Opens a buffer with change set information for the supplied repository version or the current revision of the currently open file.
    * :VcsDiff [revision] - Performs a vertical diffsplit of the current file against the last committed revision of the current file or the revision supplied.
    * :VcsCat [revision] - Splits the current file with the contents of the last committed version of the current file or the supplied revision.
    * :VcsWebLog - Opens the log for the currently versioned file in the configured vcs web app.
    * :VcsWebAnnotate [revision] - Opens the annotated view for the currently versioned file in the configured vcs web app.
    * :VcsWebChangeSet [revision] - Opens the change set for the currently versioned file in the configured vcs web app.
    * :VcsWebDiff [revision, revision] - Opens a diff view for the currently versioned file in the configured in the configured vcs web app.

Misc. Commands

    * :LocateFileEdit [file] - Locates a relative file and opens it via :edit.
    * :LocateFileSplit [file] - Locates a relative file and opens it via :split.
    * :LocateFileTab [file] - Locates a relative file and opens it via :tabnew.
    * :Split file [file ...] - Behaves like the ‘split’ command, but allows multiple files to be supplied.
    * :SplitRelative file [file ...] - Like :Split this command provides splitting of multiple files, but this command splits file relative to the file in the current buffer.
    * :Tabnew file [file ...] - Behaves like :Split, but issues a :tabnew on each file.
    * :TabnewRelative - file [file ...] - Behaves like :SplitRelative, but issues a :tabnew on each file.
    * :EditRelative file - Behaves like :SplitRelative, but issues an ‘edit’ and only supports one file at a time.
    * :ReadRelative file - Behaves like :SplitRelative, but issues a ‘read’ and only supports one file at a time.
    * :ArgsRelative file_pattern [ file_pattern ...] - Behaves like :SplitRelative, but executes ‘args’.
    * :ArgAddRelative file_pattern [ file_pattern ...] - Behaves like :SplitRelative, but executes ‘argadd’.
    * :VimgrepRelative /regex/ file_pattern [ file_pattern ...] - Executes :vimgrep relative to the current file.
    * :VimgrepAddRelative /regex/ file_pattern [ file_pattern ...] - Executes :vimgrepadd relative to the current file.
    * :LvimgrepRelative /regex/ file_pattern [ file_pattern ...] - Executes :lvimgrep relative to the current file.
    * :LvimgrepAddRelative /regex/ file_pattern [ file_pattern ...] - Executes :lvimgrepadd relative to the current file.
    * :CdRelative dir - Executes :cd relative to the current file.
    * :LcdRelative dir - Executes :lcd relative to the current file.
    * :DiffLastSaved - Performs a diffsplit with the last saved version of the currently modifed file.
    * :SwapWords - Swaps two words (with cursor placed on the first word). Supports swapping around non-word characters like commas, periods, etc.
    * :Sign - Toggles adding or removing a vim sign on the current line.
    * :Signs - Opens a new window containing a list of signs for the current buffer.
    * :SignClearUser - Removes all vim signs added via :Sign.
    * :SignClearAll - Removes all vim signs.
    * :QuickFixClear - Removes all entries from the quick fix window.
    * :LocationListClear - Removes all entries from the location list window.
    * Maximize - Toggles maximization of the current window.
    * Minimize [winnr ...] - Minimizes the current window or the windows corresponding to the window numbers supplied.
    * Minimize - Restore all minimized windows.
    * :Buffers - Opens a temporary window with a list of all the currently listed buffers, allowing you to open or remove them.
    * :Only - Closes all but the current window and any windows excluded by g:EclimOnlyExclude.
    * :OtherWorkingCopyDiff &lt;project&gt; - Diffs the current file against the same file in another project (one which has the same project relative path).
    * :OtherWorkingCopyEdit &lt;project&gt; - Like :OtherWorkingCopyDiff, except open the file in the current window.
    * :OtherWorkingCopySplit &lt;project&gt; - Like :OtherWorkingCopyDiff, except open the file in a new window.
    * :OtherWorkingCopyTabopen &lt;project&gt; - Like :OtherWorkingCopyDiff, except open the file in a new tab.</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>