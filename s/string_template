<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>* StringTemplate -- it's a java/python oriented templating engine
* it's mainly used in ANTLR, which is a nice parser/lexer/blah de blah
  generator with multiple language targets (though the Ruby target's
  pretty weak right now)
* this is a plain text version of the HTML cheat sheet found
  at http://www.antlr.org/wiki/display/ST/StringTemplate+cheat+sheet
* things that are italicized on that cheat sheet have been represented
  with surrounding underscores
* I did this with a script, and haven't proofread it thoroughly either, so
  if you see something goofy -- sorry -- feel free to correct it

================================[Expressions]================================
+-------------------------------------+-------------------------------------+
| Syntax                              | Description                         |
+-------------------------------------+-------------------------------------+
| &lt;__attribute__&gt;                     | Evaluates to the value of           |
|                                     | __attribute__.ToString() if it      |
|                                     | exists else empty string.           |
+-------------------------------------+-------------------------------------+
| &lt;i&gt;, &lt;i0&gt;                           | The iteration number indexed from   |
|                                     | one and from zero, respectively,    |
|                                     | when referenced within a template   |
|                                     | being applied to an attribute or    |
|                                     | attributes.                         |
+-------------------------------------+-------------------------------------+
| &lt;__attribute__.__property__&gt;        | Looks for __property__ of           |
|                                     | __attribute__ as a property (C#),   |
|                                     | then accessor methods like          |
|                                     | get__Property__() or                |
|                                     | is__Property__(). If that fails,    |
|                                     | StringTemplate looks for a raw      |
|                                     | field of the __attribute__ called   |
|                                     | __property__. Evaluates to the      |
|                                     | empty string if no such property is |
|                                     | found.                              |
+-------------------------------------+-------------------------------------+
| &lt;__attribute__.(__expr__)&gt;          | Indirect property lookup. Same as   |
|                                     | __attribute__.__property__ except   |
|                                     | use the value of __expr__ as the    |
|                                     | property_ name. Evaluates to the    |
|                                     | empty string if no such property is |
|                                     | found.                              |
+-------------------------------------+-------------------------------------+
| &lt;__multi-valued-attribute__&gt;        | Concatenation of ToString() invoked |
|                                     | on each element. If                 |
|                                     | __multi-valued-attribute__ is       |
|                                     | missing his evaluates to the empty  |
|                                     | string.                             |
+-------------------------------------+-------------------------------------+
| &lt;__multi-valued-attribute__;        | Concatenation of ToString() invoked |
|    separator=__expr__&gt;              | on each element separated by        |
|                                     | __expr__.                           |
+-------------------------------------+-------------------------------------+
| &lt;__template__(__argument-list__)&gt;   | Include __template__. The           |
|                                     | __argument-list__ is a list of      |
|                                     | attribute assignments where each    |
|                                     | assignment is of the form           |
|                                     | __arg-of-template__=__expr__ where  |
|                                     | __expr__ is evaluated in the        |
|                                     | context of the surrounding template |
|                                     | not of the invoked template.        |
+-------------------------------------+-------------------------------------+
| &lt;__(expr)__(__argument-list__)&gt;     | Include __template__ whose name is  |
|                                     | computed via __expr__. The          |
|                                     | __argument-list__ is a list of      |
|                                     | attribute assignments where each    |
|                                     | assignment is of the form           |
|                                     | __attribute__=__expr__. Example     |
|                                     | $(whichFormat)()$ looks up          |
|                                     | whichFormat's value and uses that   |
|                                     | as template name. Can also apply an |
|                                     | indirect template to an attribute.  |
+-------------------------------------+-------------------------------------+
| &lt;__attribute__:                     | Apply __template__ to               |
|   __template__(__argument-list__)&gt;  | __attribute__. The optional         |
|                                     | __argument-list__ is evaluated      |
|                                     | before application so that you can  |
|                                     | set attributes referenced within    |
|                                     | __template__. The default attribute |
|                                     | it is set to the value of           |
|                                     | __attribute__. If __attribute__ is  |
|                                     | multi-valued, then it is set to     |
|                                     | each element in turn and            |
|                                     | __template__ is invoked __n__ times |
|                                     | where __n__ is the number of values |
|                                     | in __attribute__. Example:          |
|                                     | $name:bold() applies bold() to      |
|                                     | name's value.                       |
+-------------------------------------+-------------------------------------+
| &lt;__attribute__:                     | Apply a template, whose name is     |
|   __(expr)__(__argument-list__)&gt;    | computed from __expr__, to each     |
|                                     | value of __attribute__. Example     |
|                                     | $data:(name)()$ looks up name's     |
|                                     | value and uses that as template     |
|                                     | name to apply to data.              |
+-------------------------------------+-------------------------------------+
| &lt;__attribute__:                     | Apply multiple templates in order   |
|   __t1__(__argument-list__):        | from left to right. The result of a |
|    ... :__tN__(__argument-list__)&gt;  | template application upon a         |
|                                     | multi-valued attribute is another   |
|                                     | multi-valued attribute. The overall |
|                                     | expression evaluates to the         |
|                                     | concatenation of all elements of    |
|                                     | the final multi-valued attribute    |
|                                     | resulting from __templateN__'s      |
|                                     | application.                        |
+-------------------------------------+-------------------------------------+
| &lt;__attribute__:                     | Apply an anonymous template to each |
|   {__anonymous-template__}&gt;         | element of __attribute__. The       |
|                                     | iterated it atribute is set         |
|                                     | automatically.                      |
+-------------------------------------+-------------------------------------+
| &lt;__attribute__:                     | Apply an anonymous template to each |
|   {__argument-name_ |               | element of __attribute__. Set the   |
|    _anonymous-template__}&gt;          | __argument-name__ to the iterated   |
|                                     | value and also set it.              |
+-------------------------------------+-------------------------------------+
| &lt;__a1__,__a2__,...,__aN__:          | Parallel list iteration. March      |
|   {__argument-list_ |               | through the values of the           |
|    _anonymous-template__}&gt;          | attributes __a1__..__aN__, setting  |
|                                     | the values to the arguments in      |
|                                     | __argument-list__ in the same       |
|                                     | order. Apply the anonymous          |
|                                     | template. There is no defined it    |
|                                     | value unless inherited from an      |
|                                     | enclosing scope.                    |
+-------------------------------------+-------------------------------------+
| &lt;__attribute__:                     | Apply an alternating list of        |
|   __t1__(),__t2__(),...,__tN__()&gt;   | templates to the elements of        |
|                                     | __attribute__. The template names   |
|                                     | may include argument lists.         |
+-------------------------------------+-------------------------------------+
| &lt;first(attr)&gt;                       | The first or only element of attr.  |
|                                     | You can combine operations to say   |
|                                     | things like first(rest(names)) to   |
|                                     | get second element.                 |
+-------------------------------------+-------------------------------------+
| &lt;last(attr)&gt;                        | The last or only element of attr.   |
+-------------------------------------+-------------------------------------+
| &lt;rest(attr)&gt;                        | All but the first element of attr.  |
|                                     | Returns nothing if $attr$ a single  |
|                                     | valued.                             |
+-------------------------------------+-------------------------------------+
| &lt;trunc(attr)&gt;                       | returns all but last element        |
+-------------------------------------+-------------------------------------+
| &lt;strip(attr)&gt;                       | Returns an iterator that skips any  |
|                                     | null values in $attr$. strip(x) =x  |
|                                     | when x is a single-valued           |
|                                     | attribute.                          |
+-------------------------------------+-------------------------------------+
| &lt;length(attr)&gt;                      | Return an integer indicating how    |
|                                     | many elements in length $attr$ is.  |
|                                     | Single valued attributes return 1.  |
|                                     | Strings are not special; i.e.,      |
|                                     | length(&quot;foo&quot;) is 1 meaning &quot;1       |
|                                     | attribute&quot;. Nulls are counted in    |
|                                     | lists so a list of 300 nulls is     |
|                                     | length 300. If you don't want to    |
|                                     | count nulls, use                    |
|                                     | length(strip(list)).                |
+-------------------------------------+-------------------------------------+
| \$ or \&lt;                            | escaped delimiter prevents $ or &lt;   |
|                                     | from starting an attribute          |
|                                     | expression and results in that      |
|                                     | single character.                   |
+-------------------------------------+-------------------------------------+
| &lt;\ &gt;, &lt;\n&gt;, &lt;\t&gt;, &lt;\r&gt;              | special character(s): space,        |
|                                     | newline, tab, carriage return.  Can |
|                                     | have multiple in single &lt;...&gt;       |
|                                     | expression.                         |
+-------------------------------------+-------------------------------------+
| &lt;\uXXXX&gt;                            | Unicode character(s).  Can have     |
|                                     | multiple in single &lt;...&gt;            |
|                                     | expression.                         |
+-------------------------------------+-------------------------------------+
| &lt;! comment !&gt;, $! comment !$        | Comments, ignored by                |
|                                     | StringTemplate.                     |
+-------------------------------------+-------------------------------------+

================================[Statements]=================================
+-------------------------------------+-------------------------------------+
| Syntax                              | Description                         |
+-------------------------------------+-------------------------------------+
| &lt;if(__attribute__)&gt;__subtemplate__  | If __attribute__ has a value or is  |
| &lt;else&gt;__subtemplate2__              | a boolean object that evaluates to  |
| &lt;endif&gt;                             | true, include __subtemplate__ else  |
|                                     | include __subtemplate2__. These     |
|                                     | conditionals may be nested.         |
+-------------------------------------+-------------------------------------+
| &lt;if(__x__)&gt;__subtemplate__          | First attribute that has a value or |
| &lt;elseif(__y__)&gt;__subtemplate2__     | is a boolean object that evaluates  |
| &lt;elseif(__z__)&gt;__subtemplate3__     | to true, include that subtemplate.  |
| &lt;else&gt;__subtemplate4__              | These conditionals may be nested.   |
| &lt;endif&gt;                             |                                     |
+-------------------------------------+-------------------------------------+
| &lt;if(!__attribute__)&gt;                | If __attribute__ has no value or is |
|   __subtemplate__&lt;endif&gt;            | a bool object that evaluates to     |
|                                     | false, include __subtemplate__.     |
|                                     | These conditionals may be nested.   |
+-------------------------------------+-------------------------------------+

================================[Group Files]================================
-- Group .stg Files ----------------------------
group __Name__ 

__t1__(__args__) ::= &quot;__template1__&quot;

__t2__(__args__) ::= &lt;&lt;
  __template2__
&gt;&gt;

__type_list_name__ ::= [
  &quot;src_type1&quot; : &quot;dest_type2&quot;,
  &quot;src_type2&quot; : &quot;dest_type2&quot;,
  default : &quot;default_type&quot;
]

-- Also ---------------------------------------

group __Name__ implements __InterfaceName__;
 ...

-- where the interface is defined via ---------

interface __InterfaceName__;

__t1__(__args__);

__t2__(__args__);

==============================[Reserved Words]===============================
-&gt; don't use these as attribute names or template names
  * default
  * first
  * group
  * if
  * implements
  * interface
  * last
  * length
  * optional
  * rest
  * strip
  * super
  * trunc
  * else
  * endif
  * elseif</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>