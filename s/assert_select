<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>Selectors
*                       any element
E                       an element of type E
E.warning               an E element whose class is &quot;warning&quot; (the document language specifies how class is determined).
E#myid                  an E element with ID equal to &quot;myid&quot;.
E[foo]                  an E element with a &quot;foo&quot; attribute
E[foo=&quot;bar&quot;]            an E element whose &quot;foo&quot; attribute value is exactly equal to &quot;bar&quot;
E[foo~=&quot;bar&quot;]           an E element whose &quot;foo&quot; attribute value is a list of space-separated values, one of which is exactly equal to &quot;bar&quot;
E[foo^=&quot;bar&quot;]           an E element whose &quot;foo&quot; attribute value begins exactly with the string &quot;bar&quot;
E[foo$=&quot;bar&quot;]           an E element whose &quot;foo&quot; attribute value ends exactly with the string &quot;bar&quot;
E[foo*=&quot;bar&quot;]           an E element whose &quot;foo&quot; attribute value contains the substring &quot;bar&quot;
E[hreflang|=&quot;en&quot;]       an E element whose &quot;hreflang&quot; attribute has a hyphen-separated list of values beginning (from the left) with &quot;en&quot;
E:root                  an E element, root of the document
E:nth-child(n)          an E element, the n-th child of its parent
E:nth-last-child(n)     an E element, the n-th child of its parent, counting from the last one
E:nth-of-type(n)        an E element, the n-th sibling of its type
E:nth-last-of-type(n)   an E element, the n-th sibling of its type, counting from the last one
E:first-child           an E element, first child of its parent
E:last-child            an E element, last child of its parent
E:first-of-type         an E element, first sibling of its type
E:last-of-type          an E element, last sibling of its type
E:only-child            an E element, only child of its parent
E:only-of-type          an E element, only sibling of its type
E:empty                 an E element that has no children (including text nodes)
E:not(s)                an E element that does not match simple selector s
E F                     an F element descendant of an E element
E &gt; F                   an F element child of an E element
E + F                   an F element immediately preceded by an E element
E ~ F                   an F element preceded by an E element

Substitution values
.?                      Class name
#?                      ID attribute
[foo=?]                 Attribute value
May be string or regular expression, e.g. &quot;[foo=?]&quot;, /bar/i


assert_select(selector, equality?, message?) { |elems| ... }
assert_select(element, selector, equality?, message?) { |elems| ... }

  Use selector to select elements from response page or first argument (element), and evalute
  equality test. Raises exception with message if equality test fails.

  Equality tests include:
    true                At least one element found (:minimum=&gt;1)
    false               No element found (:count=&gt;0)
    text, :text=&gt;text   All elements found have the text contents (string or regexp)
    n, :count=&gt;n        Exactly n elements found
    :minimum=&gt;n         At least n elements found
    :maximum=&gt;n         At most n elements found
    n..m                Between n and m elements found

  If no count specified, :minimum=&gt;1 assumed.

  If no count specified, default is :minimum=&gt;1.

  With block, calls block with all selected elements. Calling assert_select (or any of the other
  functions) within that block operates on element selected by outer block.

assert_select_rjs(id?) { |elems| ... }
assert_select_rjs(statement, id?) { |elems| ... }
assert_select_rjs(:insert, position, id?) { |elems| ... }

  Asserts that RJS statement updates/inserts HTML content and allows nested assertions on the content.
  With id, selects only RJS statement affecting elements with that id. With statement, RJS statements
  that :replace, :replace_html or :insert. With :insert can limit position (:before, :after, etc).

assert_select_email() { |elems| ... }

  Assertions on the (HTML) body of the delivered e-mail.

assert_select_encoded(element?) { |elems| ... }

  For operating on encoded HTML (e.g. RSS item description).

css_select(selector) =&gt; array
css_select(element, selector) =&gt; array

  Returns an array with selected elements (empty if no elements selected).</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>