<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>Things to give a go, for now at least:

  Erb
  Yaml


I think I understand these things enough now:
  Gem (for Setup)
  Bundle (for Setup)
  Prototype (for View)
  PrototypeHelper (for View)
  jQuery (for View)
  Xpath (for View)
  CSS (for View)


A good bird's eye view of what's in Rails (expanded from guides.rails.org top page):
  Start Here
  Getting Started with Rails

  Models
  Rails Database Migrations
  Active Record Validations and Callbacks
  Active Record Associations
  Active Record Query Interface

  Views
  Layouts and Rendering in Rails
  Action View Form Helpers
  [HAML]
  [SASS]
  [RJS?]

  Controllers
  Action Controller Overview
  Rails Routing from the Outside In
    [The 7 RESTful actions]

  Digging Deeper [some content elided]
  Testing Rails Applications
    [Cucumber (but what is there to learn about it other than Gherkin?)]
    [RSpec?]
  Debugging Rails Applications
  Rails Command Line Tasks and Rake
  Tasks


Well-recommended books on Rails:
  Agile Web Development with Rails
  Ruby on Rails Way [but not for a beginner at Rails]
  Ruby on Rails 3 Way [but not for a beginner at Rails]
  Ruby on Rails 3 Tutorial [but for Rails 3]


Define resource:
  The combination of a data model and a web interface to it.

Learn this kind of default routing by heart:
  /users        index
  /users/1      show
  /users/new    new
  /users/1/edit edit

  These don't typically render pages:
  /users        create
  /users/1      update
  /users        destroy

MVC example:
  1. Browser visit to /users
  2. The router routes /users to the index action in the Users controller;
     the router dispatches to the proper controller action; config/routes.rb
     is used to set up a table of URL/action pairs
  3. The index action asks the User model to retrieve all uesrs
  4. The User model pulls all the users from the database
  5. The User model returns the list of users to the controller
  6. The controller captures the users in the @users variable
     and passes @users to the index view
  7. The view uses Embedded Ruby to render the page as HTML
  8. The controller passes the HTML back to the browser</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>