<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>% Erlang Cheat Sheet

% this is a comment
-module(cheat_sheet). % These are called &quot;attributes&quot; to your &quot;module&quot;
-behavior(behavior_name). % Optional, Includes A Standard &quot;Behavior&quot;
-export([data_types/1]).

-record(stuff,{a,b,c}).

% Here are various data types, expressed as multiple clauses of a function.
% When the function is called with a certain atom, it returns the example list.
data_types(atoms) -&gt;
  [
    lower_cased_words_like_this,
    'escaped values with single quotes',
    'Even Works For Upper Case When Escaped'
  ];
data_types(lists) -&gt;
  [
    [1,2,3],
    [a,b,c],
    &quot;strings are technically lists of characters&quot;
  ];
data_types(numbers) -&gt;
  [
    1, % arbitrarily sized integer
    2,
    5.0, % floating point
    3.14159, 
    16#deadbeef, % hexadecimal
    8#077, % octal
    2#001101, % binary
    $E,$r,$l,$a,$n,$g,$!,$\n % Numeric values for the characters &quot;Erlang!\n&quot;
  ];
data_types(binaries) -&gt;
  [
    &lt;&lt;1:4&gt;&gt;, % a 4-bit bit-string
    &lt;&lt;&quot;some string as a binary&quot;&gt;&gt;, % a full binary, created from this string
    &lt;&lt;1,2,3&gt;&gt;, % a full binary, created from these integers
    &lt;&lt;16#deadbeef:32/unsigned-integer-bigendian&gt;&gt;,
  ];
data_types(tuples) -&gt;
  [
    {a,b,1,2}, % Some random stuff
    {size,45,gigabytes}, % a lot of capacity
    {size,36,'DD'}, % also a lot of capacity
    #stuff{a=1,b=foo,c=&quot;bar&quot;}, % records are just tuples in disguise
    {stuff,1,foo,&quot;bar&quot;}, % the above record as a raw tuple
  ];
data_types(exotic) -&gt;
  [
    fun (X,Y,Z) -&gt; % an anonymous function
      this_is_a_function
    end,
    fun lists:foreach/2, % an external function
    self(), % returns a process ID
    make_ref() % returns a reference
  ].

control_structures(A,B,C) -&gt;
  Check0 = if % note, these clauses are guards, not full expressions
    A &gt; 5 -&gt; bigger_than_5;
    A &lt; 0 -&gt; negative;
    B &gt; C -&gt; stuff;
    true -&gt; default_value
  end,
  Check1 = case {check1,A,B+C} of % the extra atom helps locate match failures
    {check1,1,2} -&gt; stuff;
    {check1,2,X} when X &gt; 5 -&gt; other_stuff;
    {check1,3,Y} -&gt;
      case {subcheck,Y} of % the extra atom helps locate match failures
        {subcheck,0} -&gt; zero;
        {subcheck,_} -&gt; default_value
      end;
    _ -&gt; default_value
  end,
  Check2 = try A / B of % Note, the case-like matching part is optional
    1 -&gt; one_times; % exceptions are not caught here, only in the expression
    2 -&gt; two_times;
    3 -&gt; three_times;
    X when X &lt; 0 -&gt; fractional;
    X when X &gt; 3 -&gt; a_bunch;
    _ -&gt; default_value
  catch
    error:bad_arith -&gt; division_by_zero;
    error:_ -&gt; some_other_error
  end,
  ok.

% TODO: Pattern Matches
% TODO: Standard Behaviors
% TODO: Messaging and Receiving
% TODO: Tail-Recursion
% TODO: Macros
% TODO: List Comprehensions
</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>