<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>* :class_name - specify the class name of the association. Use it only if that name can’t be inferred from the association name. So has_and_belongs_to_many :projects will by default be linked to the Project class, but if the real class name is SuperProject, you’ll have to specify it with this option.
    * :join_table - specify the name of the join table if the default based on lexical order isn’t what you want. WARNING: If you’re overwriting the table name of either class, the table_name method MUST be declared underneath any has_and_belongs_to_many declaration in order to work.
    * :foreign_key - specify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and &quot;_id&quot; suffixed. So a Person class that makes a has_and_belongs_to_many association will use &quot;person_id&quot; as the default foreign_key.
    * :association_foreign_key - specify the association foreign key used for the association. By default this is guessed to be the name of the associated class in lower-case and &quot;_id&quot; suffixed. So if the associated class is Project, the has_and_belongs_to_many association will use &quot;project_id&quot; as the default association foreign_key.
    * :conditions - specify the conditions that the associated object must meet in order to be included as a &quot;WHERE&quot; sql fragment, such as &quot;authorized = 1&quot;.
    * :order - specify the order in which the associated objects are returned as a &quot;ORDER BY&quot; sql fragment, such as &quot;last_name, first_name DESC&quot;
    * :uniq - if set to true, duplicate associated objects will be ignored by accessors and query methods
    * :finder_sql - overwrite the default generated SQL used to fetch the association with a manual one
    * :delete_sql - overwrite the default generated SQL used to remove links between the associated classes with a manual one
    * :insert_sql - overwrite the default generated SQL used to add links between the associated classes with a manual one
    * :extend - anonymous module for extending the proxy, see &quot;Association extensions&quot;.
    * :include - specify second-order associations that should be eager loaded when the collection is loaded.
    * :group: An attribute name by which the result should be grouped. Uses the GROUP BY SQL-clause.
    * :limit: An integer determining the limit on the number of rows that should be returned.
    * :offset: An integer determining the offset from where the rows should be fetched. So at 5, it would skip the first 4 rows.
    * :select: By default, this is * as in SELECT * FROM, but can be changed if you for example want to do a join, but not include the joined columns.</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>