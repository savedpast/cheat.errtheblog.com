<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>=== Effective .emacs ===


--- Tip #0: Use Emacs 22 ------------------------------------------------------

Emacs 22 is super stable. About half of my .emacs file (before I cleaned it up) was loading stuff that's now part of Emacs 22 and has autoloads.


--- Tip #1: Never quit Emacs --------------------------------------------------

Okay, this has nothing to do with your .emacs file, but I have to put it in here. Just because your .emacs file should load quickly doesn't imply that you should quit and restart all the time. Figure it out!

=== comments

It may be also useful to prevent C-x C-c to close your emacs if you use to misstype it. Add
(setq confirm-kill-emacs 'yes-or-no-p)
To your ~/.emacs and you will be asked to confirm your exit


--- Tip #2: (require 'cl) -----------------------------------------------------

I put this at the top of my .emacs. It's a no-brainer. It adds in a ton of compatibility with CL, so that you can just use the CL functions you know and love (well, most of them, anyway), without a second thought.


--- Tip #3: Never LOAD, never REQUIRE -----------------------------------------

Your .emacs file shouldn't contain any calls to LOAD or REQUIRE (which are slow and often cause errors on startup). The only possible exceptions are loading files that contain nothing but autoloads (or similar stuff). How do you avoid loads and requires? First try removing each call to LOAD or REQUIRE to see if it's needed at all. Often (e.g., if you follow Tip #0) Emacs already has autoloads in place for the library already (e.g., &quot;cc-mode&quot;). For other libraries, where that's not true, put your own autoloads in your .emacs file. For example, rather than load slime in my .emacs (so I can bind the F1 key to SLIME-SELECTOR), instead I have:

(autoload 'slime-selector &quot;slime&quot; t)

The only call to LOAD in my .emacs file is for &quot;erlang-start&quot;, but if you look inside the file you can see it contains only autoloads (and morally equivalent stuff). I also load the custom file, but that's different, see Tip #7. I don't have a single call to REQUIRE (beyond that mandated by Tip #2).


--- Tip #4: Understand and use EVAL-AFTER-LOAD --------------------------------

Another reason why you might have strewn needless REQUIRE and LOAD calls throughout your .emacs file is that you need to call a function from a specific library. For example, let's say you want to set your default SQL database type to MySQL:

(sql-set-product 'mysql)

If you put this in your .emacs, you'll get an error because the SQL library isn't loaded so SQL-SET-PRODUCT isn't yet defined. But before you add a LOAD or REQUIRE, stop! Instead do:

(eval-after-load &quot;sql&quot;
'(progn
(sql-set-product 'mysql)
;; any other config specific to sql
))

As the name suggests, this will defer calling that code until the SQL module is actually loaded. This saves startup time and prevents errors!

--- Tip #5: Time your .emacs --------------------------------------------------

You really ought to know how much time it's taking to load your .emacs file. 

The simplest way is to run `M-x emacs-init-time`.
But you can't write this to .emacs, since it will raise a error before emacs initialized.

If you really want it, use the following in your .emacs:

(message &quot;Emacs loaded in %fs&quot;
         (* 0.000001 (apply #'-
                            (mapcar (lambda (time)
                                      (+ (* 1000000 (+ (* 65536 (first time)) (second time))) (third time)))
                                    (list (current-time) before-init-time)))))

Previous version had some mistakes on calculating the time. Also, we have `before-init-time` and `after-init-time`, so we don't have to save the init time to a var.

After Emacs finishing initializing, you can switch to the *Messages* buffer and see how much of that time was taken by loading your .emacs. Mine now contributes less than one second!

p.s. We also have another interesting function `M-x emacs-uptime`, check it out!

--- Tip #6: Set background colors ---------------------------------------------

Don't just stand for the default colors! Set them to what you really want. In my case I want a reverse video effect:

(set-background-color &quot;black&quot;)
(set-face-background 'default &quot;black&quot;)
(set-face-background 'region &quot;black&quot;)
(set-face-foreground 'default &quot;white&quot;)
(set-face-foreground 'region &quot;gray60&quot;)
(set-foreground-color &quot;white&quot;)
(set-cursor-color &quot;red&quot;)


--- Tip #7: Separate custom file ----------------------------------------------

It's annoying to have your .emacs file modified by Emacs' &quot;custom&quot; library, especially if you check in your .emacs to a source code control system such as Subversion (which you should do) and synchronize it on multiple machines. Keep those customizations in a separate file:

(setq custom-file &quot;~/.emacs-custom.el&quot;)
(load custom-file 'noerror)

--- Tip #8: Move autosaves and backups to one place (from http://snarfed.org/space/gnu%20emacs%20backup%20files) ---------------------------

;; Put autosave files (ie #foo#) in one place, *not*
;; scattered all over the file system!
(defvar autosave-dir
 (concat &quot;/tmp/emacs_autosaves/&quot; (user-login-name) &quot;/&quot;))
(make-directory autosave-dir t)
(setq auto-save-file-name-transforms `((&quot;\\(?:[^/]*/\\)*\\(.*\\)&quot; ,(concat autosave-dir &quot;\\1&quot;) t)))

;; Put backup files (ie foo~) in one place too. (The backup-directory-alist
;; list contains regexp=&gt;directory mappings; filenames matching a regexp are
;; backed up in the corresponding directory. Emacs will mkdir it if necessary.)
(defvar backup-dir (concat &quot;/tmp/emacs_backups/&quot; (user-login-name) &quot;/&quot;))
(setq backup-directory-alist (list (cons &quot;.&quot; backup-dir)))

=== comments

Well, LOADs and REQUIREs are often slow (and often accomplish nothing, since there are usually autoloads for &quot;standard&quot; functionality nowadays anyway) and also a source of errors. For example, I run Emacs on 5 different machines, and they don't all have the same libraries on them (I'm talking about the things that aren't part of the Emacs 22 distribution, of course). Using a combination of EVAL-AFTER-LOAD and AUTOLOAD instead of using LOAD means that unless I actually try to use features that aren't available on a particular machine, I won't get an error loading the library unless I actually try to use the feature.

---

Thanks! After eval-after-load-ing everything I could, I nearly halved my emacs startup time!

At some point I'll go back and move each library's config to its own file and just autoload all of those, but I have work to put off.

---


-------------------------------------------------------------------------------
SOURCE: http://a-nickels-worth.blogspot.com/2007/11/effective-emacs.html
-------------------------------------------------------------------------------

--- Tip #9: Byte Compile Configs ----------------------------------------------

Loading many Emacs Lisp files on boot will be even faster if you run the compilation command against your Emacs directory.

(defun byte-recompile-home ()
  (interactive)
  (byte-recompile-directory &quot;~/.emacs.d&quot; 0))</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>