<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>Padrino - The Elegant Ruby Framework

http://www.padrinorb.com/

# Rake Tasks

ActiveRecord Tasks:

rake ar:abort_if_pending_migrations    # Raises an error if there are pending migrations.
rake ar:auto:upgrade                   # Uses schema.rb to auto-upgrade.
rake ar:charset                        # Retrieves database charset.
rake ar:collation                      # Retrieves databsae collation.
rake ar:create                         # Creates the database as defined in config/database.yml
rake ar:create:all                     # Creates local databases as defined in config/database.yml
rake ar:drop                           # Drops the database for the current Padrino.env
rake ar:drop:all                       # Drops local databases defined in config/database.yml
rake ar:forward                        # Pushes the schema to the next version.
rake ar:migrate                        # Migrates the database through scripts in db/migrate.
rake ar:migrate:down                   # Runs the &quot;down&quot; for a given migration VERSION.
rake ar:migrate:redo                   # Rollbacks current migration and migrates up to version
rake ar:migrate:reset                  # Resets your database using your migrations.
rake ar:migrate:up                     # Runs the &quot;up&quot; for a given migration VERSION NUMBER
rake ar:reset                          # Drops and recreates the database using db/schema.rb.
rake ar:rollback                       # Rolls back the schema to previous schema version.
rake ar:schema:dump                    # Creates a portable db/schema.rb file.
rake ar:schema:load                    # Loads a schema.rb file into the database.
rake ar:schema:to_migration            # Creates a migration from schema.rb
rake ar:schema:to_migration_with_reset # Creates a migration and resets the migrations log.
rake ar:setup                          # Creates the database, loads the schema, and seeds data.
rake ar:structure:dump                 # Dumps the database structure to a SQL file.
rake ar:version                        # Retrieves the current schema version number.

DataMapper Tasks:

rake dm:auto:migrate           # Performs an automigration (resets your db data)
rake dm:auto:upgrade           # Performs a non destructive automigration
rake dm:create                 # Creates the database
rake dm:drop                   # Drops the database (postgres and mysql only)
rake dm:migrate                # Migrates the database to the latest version
rake dm:migrate:down[version]  # Migrates down using migrations
rake dm:migrate:up[version]    # Migrates up using migrations
rake dm:reset                  # Drops the database, and migrates from scratch
rake dm:setup                  # Create the database migrate and initialize with the seed data


Sequel Tasks:

rake sq:migrate:auto           # Perform automigration (reset your db data)
rake sq:migrate:to[version]    # Perform migration up/down to VERSION
rake sq:migrate:up             # Perform migration up to latest migration available
rake sq:migrate:down           # Perform migration down (erase all data)

Mongomapper Tasks:
rake mm:translate              # Generates .yml files for I18n translations

Mongoid Tasks:
rake mi:drop                    # Drops all the collections for the database for the current environment
rake mi:create_indexes          # Create the indexes defined on your mongoid models
rake mi:objectid_convert        # Convert string objectids in mongo database to ObjectID type
rake mi:cleanup_old_collections # Clean up old collections backed up by objectid_convert

# Generators

## Project Generator

The usage for the project generator is quite simple:
$ padrino g project &lt;the_app_name&gt; &lt;/path/to/create/app&gt; --&lt;component-name&gt; &lt;value&gt;

The simplest possible command to generate a base application would be:
$ padrino g project demo_project

This would construct a Padrino application DemoApp (which extends from Padrino::Application) inside the folder ‘demo_project’ at our current path. Inside the application there would be configuration and setup performed for the default components.
You can also define specific components to be used:
$ padrino g project demo_project -t rspec -e haml -m rr -s jquery -d datamapper -c sass

You can also instruct the generator to skip a certain component to avoid using one at all (or to use your own):
$ padrino g project demo_project --test none --renderer none

You can also specify an alternate name for your core application using the --app option:
$ padrino g project demo_project --app alternate_app_name # alias -n

The generator uses the bundler gem to resolve any application dependencies when the application is newly created. The necessary bundler command can be executed automatically through the generator with:
$ padrino g project demo_project --run_bundler # alias -b

## Controller

Using the controller generator is as simple as:
$ padrino g controller Admin

If you want create a controller for a specified sub app you can:
$ padrino g controller Admin -a my_sub_app

You can also specify desired actions to be added to your controller:
$ padrino g controller Admin get:index get:new post:create

## Model

Using the model generator is as simple as:
$ padrino g model User

You can also specify desired fields to be contained within your User model:
$ padrino g model User name:string age:integer email:string

You can destroy models that you created via the destroy option and setting it to true. default is false.
$ padrino g model User -d</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>