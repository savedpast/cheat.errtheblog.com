<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>Jasmine jQuery matchers

jasmine-jquery provides following custom matchers (in alphabetical order):

toBe(jQuerySelector)
e.g. expect($('&lt;div id=&quot;some-id&quot;&gt;&lt;/div&gt;')).toBe('div')
e.g. expect($('&lt;div id=&quot;some-id&quot;&gt;&lt;/div&gt;')).toBe('div#some-id')

toBeChecked()
only for tags that have checked attribute
e.g. expect($('&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt;')).toBeChecked()

toBeEmpty()
Checks for child DOM elements or text.

toBeHidden()
Elements can be considered hidden for several reasons:
  They have a CSS display value of none.
  They are form elements with type equal to hidden.
  Their width and height are explicitly set to 0.
  An ancestor element is hidden, so the element is not shown on the page.

toBeSelected()
only for tags that have selected attribute
e.g. expect($('&lt;option selected=&quot;selected&quot;&gt;&lt;/option&gt;')).toBeSelected()

toBeVisible()
Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.

toContain(jQuerySelector)
e.g. expect($('&lt;div&gt;&lt;span class=&quot;some-class&quot;&gt;&lt;/span&gt;&lt;/div&gt;')).toContain('span.some-class')

toExist()

toHaveAttr(attributeName, attributeValue)
attribute value is optional, if omitted it will check only if attribute exists

toHaveProp(propertyName, propertyValue)
property value is optional, if omitted it will check only if property exists

toHaveBeenTriggeredOn(selector)
if event has been triggered on selector (see &quot;Event Spies&quot;, below)

toHaveBeenPreventedOn(selector)
if event has been prevented on selector (see &quot;Event Spies&quot;, below)

toHaveClass(className)
e.g. expect($('&lt;div class=&quot;some-class&quot;&gt;&lt;/div&gt;')).toHaveClass(&quot;some-class&quot;)

toHaveData(key, value)
value is optional, if omitted it will check only if an entry for that key exists

toHaveHtml(string)
e.g. expect($('&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;')).toHaveHtml('&lt;span&gt;&lt;/span&gt;')

toHaveId(id)
e.g. expect($('&lt;div id=&quot;some-id&quot;&gt;&lt;/div&gt;')).toHaveId(&quot;some-id&quot;)

toHaveText(string)
accepts a String or regular expression
e.g. expect($('&lt;div&gt;some text&lt;/div&gt;')).toHaveText('some text')

toHaveValue(value)
only for tags that have value attribute
e.g. expect($('&lt;input type=&quot;text&quot; value=&quot;some text&quot;/&gt;')).toHaveValue('some text')

toBeDisabled()
e.g. expect('&lt;input type='submit' disabled='disabled'/&gt;').toBeDisabled()

toBeFocused()
e.g. expect($('&lt;input type='text' /&gt;').focus()).toBeFocused()

toHandle(eventName)
e.g. expect($form).toHandle(&quot;submit&quot;)

toHandleWith(eventName, eventHandler)
e.g. expect($form).toHandleWith(&quot;submit&quot;, yourSubmitCallback)

The same as with standard Jasmine matchers, all of above custom matchers may be inverted by using .not prefix, e.g.:
expect($('&lt;div&gt;some text&lt;/div&gt;')).not.toHaveText(/other/)

Fixtures
Fixture module of jasmine-jquery allows you to load HTML content to be used by your tests. The overall workflow is like follows:

In myfixture.html file:
&lt;div id=&quot;my-fixture&quot;&gt;some complex content here&lt;/div&gt;
Inside your test:

loadFixtures('myfixture.html');

$('#my-fixture').myTestedPlugin();

expect($('#my-fixture')).to...;

By default, fixtures are loaded from spec/javascripts/fixtures. You can configure this path: jasmine.getFixtures().fixturesPath = 'my/new/path';.

Your fixture is being loaded into &lt;div id=&quot;jasmine-fixtures&quot;&gt;&lt;/div&gt; container that is automatically added to the DOM by the Fixture module (If you REALLY must change id of this container, try: jasmine.getFixtures().containerId = 'my-new-id'; in your test runner). To make tests fully independent, fixtures container is automatically cleaned-up between tests, so you don't have to worry about left-overs from fixtures loaded in preceeding test. Also, fixtures are internally cached by the Fixture module, so you can load the same fixture file in several tests without penalty to your test suite's speed.

To invoke fixture related methods, obtain Fixtures singleton through a factory and invoke a method on it:

jasmine.getFixtures().load(...);

There are also global short cut functions available for the most used methods, so the above example can be rewritten to just:

loadFixtures(...);

Several methods for loading fixtures are provided:

load(fixtureUrl[, fixtureUrl, ...])
Loads fixture(s) from one or more files and automatically appends them to the DOM (to the fixtures container).

read(fixtureUrl[, fixtureUrl, ...])
Loads fixture(s) from one or more files but instead of appending them to the DOM returns them as a string (useful if you want to process fixture's content directly in your test).

set(html)
Doesn't load fixture from file, but instead gets it directly as a parameter (html parameter may be a string or a jQuery element, so both set('&lt;div&gt;&lt;/div&gt;') and set($('&lt;div/&gt;')) will work). Automatically appends fixture to the DOM (to the fixtures container). It is useful if your fixture is too simple to keep it in an external file or is constructed procedurally, but you still want Fixture module to automatically handle DOM insertion and clean-up between tests for you.

preload(fixtureUrl[, fixtureUrl, ...])
Pre-loads fixture(s) from one or more files and stores them into cache, without returning them or appending them to the DOM. All subsequent calls to load or read methods will then get fixtures content from cache, without making any AJAX calls (unless cache is manually purged by using clearCache method). Pre-loading all fixtures before a test suite is run may be useful when working with libraries like jasmine-ajax that block or otherwise modify the inner workings of JS or jQuery AJAX calls.
All of above methods have matching global short cuts:

loadFixtures(fixtureUrl[, fixtureUrl, ...])

readFixtures(fixtureUrl[, fixtureUrl, ...])

setFixtures(html)
Also, a helper method for creating HTML elements for your tests is provided:

sandbox([{attributeName: value[, attributeName: value, ...]}])
It creates an empty DIV element with a default id=&quot;sandbox&quot;. If a hash of attributes is provided, they will be set for this DIV tag. If a hash of attributes contains id attribute it will override the default value. Custom attributes can also be set. So e.g.:

sandbox();
Will return:
&lt;div id=&quot;sandbox&quot;&gt;&lt;/div&gt;    

And:
sandbox({
  id: 'my-id',
  class: 'my-class',
  myattr: 'my-attr'
});
Will return:
&lt;div id=&quot;my-id&quot; class=&quot;my-class&quot; myattr=&quot;my-attr&quot;&gt;&lt;/div&gt;

Sandbox method is useful if you want to quickly create simple fixtures in your tests without polluting them with HTML strings:

setFixtures(sandbox({class: 'my-class'}));

$('#sandbox').myTestedClassRemoverPlugin();

expect($('#sandbox')).not.toHaveClass('my-class');

This method also has a global short cut available:
sandbox([{attributeName: value[, attributeName: value, ...]}])

Additionally, two clean up methods are provided:

clearCache()
purges Fixture module internal cache (you should need it only in very special cases; typically, if you need to use it, it may indicate a smell in your test code)

cleanUp()
cleans-up fixtures container (this is done automatically between tests by Fixtures module, so there is no need to ever invoke this manually, unless you're testing a really fancy special case and need to clean-up fixtures in the middle of your test)
These two methods do not have global short cut functions.

Event Spies
Spying on jQuery events can be done with spyOnEvent and expect(eventName).toHaveBeenTriggeredOn(selector). First, spy on the event:

spyOnEvent($('#some_element'), 'click');
$('#some_element').click();
expect('click').toHaveBeenTriggeredOn($('#some_element'));

You can similarly check if triggered event was prevented:
spyOnEvent($('#some_element'), 'click');
$('#some_element').click();
expect('click').toHaveBeenPreventedOn($('#some_element'));

Much thanks to Luiz Fernando Ribeiro for his article on Jasmine event spies.</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>