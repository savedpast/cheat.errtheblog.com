<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>---
This select box serves two purposes in a view, say a 'new' or 'edit' view:
1. The user can choose a pre-existing object by selecting from a dropdown
   list of the existing objects, rather than typing into an entry field.
2. The user can reference the object by a friendly name rather than by id.

In the 'foobar' Person view, to select a reference to a Person:

  &lt;% form_for([foobar]) do |f| %&gt;
    &lt;%= f.label &quot;Name:&quot; %&gt;
    &lt;%= f.select :person_id, Person.select_list %&gt;

And in the Person model:

  def self.select_list
    self.find(:all).map { |p| [p.name, p.id] }
  end


To choose from a list of a subset of all People:

In the view:
  &lt;%= f.label &quot;Member:&quot; %&gt;
  &lt;%= f.select :person_id, Person.select_member_list %&gt;

And in the Person model:
  def self.select_member_list
    self.find(:all).map { |p| [p.name, p.id] if p.member? }.compact
  end

--
When there is a one-to-many association involved, and you are presenting
a choice from among the existing association objects, there is an easy
collection_select method that the belongs_to association gives you.  As
Ryan Bates discusses in Railscasts episode 057, in the view to create a
Product, to choose its Category, you can use:

  &lt;%= f.collection_select :category_id, Category.all, :id, :name,
    :prompt =&gt; &quot;Select a category:&quot; %&gt;

To provide the option to define &amp; choose a new Category when creating a
Product, you can add the Category creation to the Person model and view.
The belongs_to association provides the 'create_[associated model]'
method.

In the view:
  ... Or create a new category:
  &lt;%= f.text_field :new_category_name %&gt;

And in the Person model, define the new attribute (new_category_name),
and a before_save callback to create the new category if entered:

  attr_accessor :new_category_name
  before_save :create_category_from_name
  def create_category_from_name
    create_category(:name =&gt; new_category_name) unless \
      new_category_name.blank?</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>