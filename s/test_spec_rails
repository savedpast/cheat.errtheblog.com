<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>test/spec/rails by Per &quot;Tuxie&quot; Wigren &lt;per.wigren@gmail.com&gt;

http://svn.techno-weenie.net/projects/plugins/test_spec_on_rails/

This plugin contain some helpers to test your Rails app using test/spec.

There's also a rake treat at: http://require.errtheblog.com/plugins/wiki/TestSpecRails

Installation
------------
 * Install test/spec: gem install test-spec
 * Install test/spec/rails
 * require 'test/spec/rails' in your test_helper.rb


Model validation
----------------
  @user.should.validate
  @user.should.not.validate
  or:
  @user.should.be.validated
  @user.should.not.be.validated


Redirection
-----------
  response.should.be.redirected           # assert_response :redirect
  response.should.redirect foo_url(@foo)  # assert_redirected_to foo_url(@foo)
  should.redirect_to :action =&gt; 'show'    # because &quot;response&quot; is optional

  It's aliased as redirect, redirect_to, redirected and redirected_to


Output verification
-------------------
  Wrapper for assert_select:

  get :show
  page.should.select &quot;form#user_form&quot;             # require the output to have a &lt;form id=&quot;user_form&quot;&gt;

  page.should.select &quot;form#user_form&quot; do |form|
    form.should.select &quot;input[type=submit]&quot;       # the user_form must include a &lt;input type=&quot;submit&quot;&gt;
  end


HTTP Status
-----------
  Wrapper for assert_response:

  status.should.be :success
  status.should.be 200


Which template was rendered?
----------------------------
  Wrapper for assert_template:

  template.should.be &quot;foo/show.rhtml&quot;


URL testing
-----------
  get :show, :user_id =&gt; 1
  url.should.be &quot;/users/1&quot;
  url.should.be :controller =&gt; &quot;users&quot;, :action =&gt; &quot;show&quot;, :user_id =&gt; 1


Setup controller for testing + example usage
--------------------------------------------
  context &quot;A guest&quot; do
    use_controller FooController

    specify &quot;isn't allowed to foo&quot; do
      post :create, :foo =&gt; 'bar'
      flash[:error].should.not.be.blank
      response.should.redirect :controller =&gt; 'front', :action =&gt; 'show'
      assigns(:foo).errors.on(:bar).should.not.be.blank
      assigns(:foo).should.not.validate
      follow_redirect
      page.should.select &quot;#errors&quot;, :text =&gt; /#{flash[:error]}/
    end
  end

  context &quot;Tuxie&quot; do
    setup do
      use_controller FooController
      login_as :tuxie
    end

    specify &quot;may foo&quot; do
      post :create, :foo =&gt; 'bar'
      flash[:notice].should.not.be.blank
      assigns(:foo).errors.should.be.empty
      assigns(:foo).should.validate
      should.redirect_to :action =&gt; 'show'
      follow_redirect
      page.should.select &quot;#notice&quot;, :text =&gt; /#{flash[:notice]}/
    end
  end


Misc
----

  page, response and request are just aliases for self (the TestCase) so the 
  following are functionally identical:

  page.should.redirect
  response.should.redirect
  request.should.redirect

  output, body, html and xhtml return @response.body so the following lines 
  are identical:

  output.should.match /foo/
  html.should.match /foo/
  xhtml.should.match /foo/
  body.should.match /foo/

  If an object respond to #should_equal, that method will be used instead 
  of assert_equal when using foo.should.equal(bar) or foo.should.be(bar)
  foo.should.not.equal and foo.should.not.be look for #should_not_equal</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>