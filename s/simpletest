<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>&lt;?php
  /**
   * A unit test class with all available functions
   */
  require 'simpletest/autorun.php';
  class HelloTest extends UnitTestCase {

    function setUp() {
      // Runs this before each test method
    }

    function tearDown() {
      // Runs this after each test method
    }

    function testHello() {
      // Fail if $x is false
      $x = true;
      $this-&gt;assertTrue($x);

      // Fail if $x is true
      $this-&gt;assertFalse($x);

      // Fail if $x is set
      $this-&gt;assertNull($x);

      // Fail if $x not set
      $this-&gt;assertNotNull($x);

      // Fail if $x is not the class or type $t
      $this-&gt;assertIsA($x, $t);

      // Fail if $x is of the class or type $t
      $this-&gt;assertNotA($x, $t);

      // Fail if $x == $y is false
      $this-&gt;assertEqual($x, $y);

      // Fail if $x == $y is true
      $this-&gt;assertNotEqual($x, $y);

      // Fail if abs($x - $y) &lt; $m is false
      $this-&gt;assertWithinMargin($x, $y, $m);

      // Fail if abs($x - $y) &lt; $m is true
      $this-&gt;assertOutsideMargin($x, $y, $m);

      // Fail if $x == $y is false or a type mismatch
      $this-&gt;assertIdentical($x, $y);

      // Fail if $x == $y is true and types match
      $this-&gt;assertNotIdentical($x, $y);

      // Fail unless $x and $y are the same variable
      $this-&gt;assertReference($x, $y);

      // Fail unless $x and $y are identical copies
      $this-&gt;assertClone($x, $y);

      // Fail unless the regex $p matches $x
      $this-&gt;assertPattern($p, $x);

      // Fail if the regex $p matches $x
      $this-&gt;assertNoPattern($p, $x);

      // Swallows any upcoming matching error
      $this-&gt;expectError($x);

      // Fail on failed expectation object $e
      $this-&gt;assert($e);

      // Sends a test pass
      $this-&gt;pass();

      // Sends a test failure
      $this-&gt;fail();

      // Sends an exception event
      $this-&gt;error();

      // Sends a user defined message to the test reporter
      $this-&gt;signal($type, $payload);

      // Does a formatted print_r() for quick and dirty debugging
      $this-&gt;dump($var);
    }
  }
?&gt;

&lt;?php
  /**
   * A test suite class that loads all tests from files that end
   * in &quot;_test.php&quot;, from a directory structure like this:
   * 
   * lib-foo/test/1_test.php
   * lib-foo/test/2_test.php
   * lib-bar/test/1_test.php
   * lib-bar/test/2_test.php
   * this_class_in_a_file.php
   */
  require 'simpletest/autorun.php';
  class AllTests extends TestSuite {
    function AllTests() {
      $this-&gt;TestSuite('All tests');

      // Load all test files from all libs
      $glob_pattern = dirname(__FILE__) . &quot;/**/test/*_test.php&quot;;
      $test_files   = glob($glob_pattern);
      foreach ($test_files as $test_file) {
        $this-&gt;addFile($test_file);
      }
    }
  }
?&gt;</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>