<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>A regexp's form is written /pattern/modifiers where &quot;pattern&quot; is the regular expression itself, and &quot;modifiers&quot; are a series of characters indicating various options.

(see an alternate/more complete cheat-sheet with 'cheat regex')

/i makes match case insensitive.
/m makes the dot match newlines.
/o causes any #{...} substitutions in a particular regex literal to be performed just once, the first time it is evaluated. Otherwise, the substitutions will be performed every time the literal generates a Regexp object.

[] 	range specification (e.g., [a-z] means a letter in the range a to z)
\w 	letter or digit; same as [0-9A-Za-z]
\W 	neither letter or digit
\s 	space character; same as [ \t\n\r\f]
\S 	non-space character
\d 	digit character; same as [0-9]
\D 	non-digit character
\b 	backspace (0x08) (only if in a range specification)
\b 	word boundary (if not in a range specification)
\B 	non-word boundary
* 	zero or more repetitions of the preceding
+ 	one or more repetitions of the preceding
{m,n} 	at least m and at most n repetitions of the preceding
? 	at most one repetition of the preceding; same as {0,1}
| 	either preceding or next expression may match
() 	grouping

print &quot;success&quot; if subject =~ /regex/

result = subject.gsub(/before/, &quot;after&quot;)

myarray = mystring.scan(/delimiter/)</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>