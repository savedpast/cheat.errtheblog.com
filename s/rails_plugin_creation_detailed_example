<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>You should be able to use this as a template for any custom plugin.

Generate the initial plugin stuff:
&gt; script/generate plugin acts_as_foo
&gt; script/generate  controller worker
&gt; cd vendor/plugins/acts_as_foo/

Edit the following files like so:

----- vendor/plugins/acts_as_foo/init.rb
require 'acts_as_foo.rb'

----- vendor/plugins/acts_as_foo/lib/acts_as_foo.rb 
module Foo 
  def self.included(base)
    base.extend ClassMethods
    base.class_eval do
      include InstanceMethods
    end
  end
  module ClassMethods
    def acts_as_foo(params)
      class_eval &lt;&lt;-STUFF
        def bar 
	  '#{params[:bar]}!'
        end
      STUFF
    end
  end
  module InstanceMethods
    def a_fubar
      'fubar called...'
    end
  end
end

---- app/controllers/worker_controller.rb 
include Foo
class WorkerController &lt; ApplicationController
  class MyFoo 
    acts_as_foo :bar =&gt; 'This is bar from foo -- go figure!'
  end
  def index
    f = MyFoo.new
    logger.info(&quot;\n\n---f.bar: &quot; + f.bar) # sanity check ;)
    render(:text =&gt; &quot;WorkerController. f.bar outputs: #{f.bar}&quot;) # something in the browser.
    logger.info(&quot;\n\n---a_fubar: &quot; + a_fubar) # tests calling the instance method directly
  end
end


------
Usage:
------
&gt; ruby script/server
http://localhost:3000/worker

In the log file or server console output:
Processing WorkerController#index (for 127.0.0.1 at 2009-07-29 14:50:35) [GET]
---f.bar: This is bar from foo -- go figure!!
---a_fubar: fubar called...

== TESTING: A test should be included with your plugin so here we go!

--/vendor/plugins/acts_as_foo/test/acts_as_foo_test.rb
require 'test/unit'
require File.expand_path(
	    File.join(File.dirname(__FILE__), '../../../../config/environment')
	)

include Foo

class MyFoo 
  acts_as_foo :bar =&gt; 'Hello'
end

class ActsAsFooTest &lt; Test::Unit::TestCase
  def setup
    @f = MyFoo.new
  end

  def test_bar_returns_Hello
    assert_equal @f.bar, 'Hello!' # remember it had an exclamation mark in there ;)
  end

  def test_a_fubar
    assert_equal @f.a_fubar, 'fubar called...'
  end
end

------
Usage:
------
Now from the test directory run:
&gt; rake test
Started
..
Finished in 0.000518 seconds.
2 tests, 2 assertions, 0 failures, 0 errors</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>