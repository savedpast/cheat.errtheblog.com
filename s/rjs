<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>&lt;&lt;(javascript)
Writes raw JavaScript to the page.

[](id)
  Returns a element reference by finding it through id in the DOM. This element can then be used for further method calls. Examples:
    page['blank_slate']                  # =&gt; $('blank_slate');
    page['blank_slate'].show             # =&gt; $('blank_slate').show();
    page['blank_slate'].show('first').up # =&gt; $('blank_slate').show('first').up();

alert(message)
  Displays an alert dialog with the given message.

assign(variable, value)
  Assigns the JavaScript variable the given value.

call(function, *arguments, &amp;block)
  Calls the JavaScript function, optionally with the given arguments.
  If a block is given, the block will be passed to a new JavaScriptGenerator; the resulting JavaScript code will then be wrapped inside function() { … } and passed as the called function‘s final argument.

delay(seconds = 1) {|| ...}
  Executes the content of the block after a delay of seconds. Example:
    page.delay(20) do
      page.visual_effect :fade, 'notice'
    end

draggable(id, options = {})
  Creates a script.aculo.us draggable element. See ActionView::Helpers::ScriptaculousHelper for more information.

drop_receiving(id, options = {})
  Creates a script.aculo.us drop receiving element. See ActionView::Helpers::ScriptaculousHelper for more information.

hide(*ids)
  Hides the visible DOM elements with the given ids.

insert_html(position, id, *options_for_render)
  Inserts HTML at the specified position relative to the DOM element identified by the given id.
  position may be one of:
  :top:	HTML is inserted inside the element, before the element‘s existing content.
  :bottom:	HTML is inserted inside the element, after the element‘s existing content.
  :before:	HTML is inserted immediately preceeding the element.
  :after:	HTML is inserted immediately following the element.
  options_for_render may be either a string of HTML to insert, or a hash of options to be passed to ActionView::Base#render. For example:
    # Insert the rendered 'navigation' partial just before the DOM
    # element with ID 'content'.
    insert_html :before, 'content', :partial =&gt; 'navigation'

    # Add a list item to the bottom of the &lt;ul&gt; with ID 'list'.
    insert_html :bottom, 'list', '&lt;li&gt;Last item&lt;/li&gt;'

literal(code)
  Returns an object whose to_json evaluates to code. Use this to pass a literal JavaScript expression as an argument to another JavaScriptGenerator method.

redirect_to(location)
  Redirects the browser to the given location, in the same form as url_for.

remove(*ids)
  Removes the DOM elements with the given ids from the page.

replace(id, *options_for_render)
  Replaces the &quot;outer HTML&quot; (i.e., the entire element, not just its contents) of the DOM element with the given id.
  options_for_render may be either a string of HTML to insert, or a hash of options to be passed to ActionView::Base#render. For example:
    # Replace the DOM element having ID 'person-45' with the
    # 'person' partial for the appropriate object.
    replace 'person-45', :partial =&gt; 'person', :object =&gt; @person
  This allows the same partial that is used for the insert_html to be also used for the input to replace without resorting to the use of wrapper elements.
  Examples:
    &lt;div id=&quot;people&quot;&gt;
      &lt;%= render :partial =&gt; 'person', :collection =&gt; @people %&gt;
    &lt;/div&gt;

    # Insert a new person
    page.insert_html :bottom, :partial =&gt; 'person', :object =&gt; @person

    # Replace an existing person
    page.replace 'person_45', :partial =&gt; 'person', :object =&gt; @person

replace_html(id, *options_for_render)
  Replaces the inner HTML of the DOM element with the given id.
  options_for_render may be either a string of HTML to insert, or a hash of options to be passed to ActionView::Base#render. For example:
    # Replace the HTML of the DOM element having ID 'person-45' with the
    # 'person' partial for the appropriate object.
    replace_html 'person-45', :partial =&gt; 'person', :object =&gt; @person

select(pattern)
  Returns a collection reference by finding it through a CSS pattern in the DOM. This collection can then be used for further method calls. Examples:
    page.select('p')                      # =&gt; $$('p');
    page.select('p.welcome b').first      # =&gt; $$('p.welcome b').first();
    page.select('p.welcome b').first.hide # =&gt; $$('p.welcome b').first().hide();
  You can also use prototype enumerations with the collection. Observe:
    page.select('#items li').each do |value|
      value.hide
    end
    # =&gt; $$('#items li').each(function(value) { value.hide(); });
  Though you can call the block param anything you want, they are always rendered in the javascript as ‘value, index.’ Other enumerations, like collect() return the last statement:
    page.select('#items li').collect('hidden') do |item|
      item.hide
    end
    # =&gt; var hidden = $$('#items li').collect(function(value, index) { return value.hide(); });

show(*ids)
  Shows hidden DOM elements with the given ids.

sortable(id, options = {})
  Creates a script.aculo.us sortable element. Useful to recreate sortable elements after items get added or deleted. See ActionView::Helpers::ScriptaculousHelper for more information.

toggle(*ids)
  Toggles the visibility of the DOM elements with the given ids.

visual_effect(name, id = nil, options = {})
  Starts a script.aculo.us visual effect. See ActionView::Helpers::ScriptaculousHelper for more information.</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>