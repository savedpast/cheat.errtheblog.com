<!DOCTYPE html><html><head><title>$ command line ruby cheat sheets</title><link charset="utf-8" href="/style.css" media="screen" rel="stylesheet" type="text/css" /></head><body><div class="main"><div class="header"><h1><a href="/">cheat sheets.</a></h1><code class="header">$ command line ruby cheat sheets</code></div></div><div class="content"><pre>You use has_many in your ActiveRecord models.  In the class Order for your orders table, you would write has_many :line_items to indicate the relationship between Orders and Line Items.  In this case, you are saying an order has many line items (and don't forget to say :belongs_to in the LineItem mode!!!)

Options for has_many

:class_name - specify the class name of the association. Use it only if that name can’t be inferred from the association name. So has_many :products will by default be linked to the Product class, but if the real class name is SpecialProduct, you’ll have to specify it with this option.

:conditions - specify the conditions that the associated objects must meet in order to be included as a &quot;WHERE&quot; sql fragment, such as &quot;price &gt; 5 AND name LIKE ‘B%’&quot;.

:order - specify the order in which the associated objects are returned as a &quot;ORDER BY&quot; sql fragment, such as &quot;last_name, first_name DESC&quot;

:group - specify the attribute by which the associated objects are returned as a &quot;GROUP BY&quot; sql fragment, such as &quot;category&quot;

:foreign_key - specify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and &quot;_id&quot; suffixed. So a Person class that makes a has_many association will use &quot;person_id&quot; as the default foreign_key.

:dependent - if set to :destroy all the associated objects are destroyed alongside this object by calling their destroy method. If set to :delete_all all associated objects are deleted without calling their destroy method. If set to :nullify all associated objects’ foreign keys are set to NULL without calling their save callbacks. NOTE: :dependent =&gt; true is deprecated and has been replaced with :dependent =&gt; :destroy. May not be set if :exclusively_dependent is also set.

:exclusively_dependent - Deprecated; equivalent to :dependent =&gt; :delete_all. If set to true all the associated object are deleted in one SQL statement without having their before_destroy callback run. This should only be used on associations that depend solely on this class and don’t need to do any clean-up in before_destroy. The upside is that it’s much faster, especially if there’s a counter_cache involved. May not be set if :dependent is also set.

:finder_sql - specify a complete SQL statement to fetch the association. This is a good way to go for complex associations that depend on multiple tables. Note: When this option is used, find_in_collection is not added.

:counter_sql - specify a complete SQL statement to fetch the size of the association. If +:finder_sql+ is specified but +:counter_sql+, +:counter_sql+ will be generated by replacing SELECT … FROM with SELECT COUNT(*) FROM.

:extend - specify a named module for extending the proxy, see &quot;Association extensions&quot;.

:include - specify second-order associations that should be eager loaded when the collection is loaded.

:group: An attribute name by which the result should be grouped. Uses the GROUP BY SQL-clause.

:limit: An integer determining the limit on the number of rows that should be returned.

:offset: An integer determining the offset from where the rows should be fetched. So at 5, it would skip the first 4 rows.

:select: By default, this is * as in SELECT * FROM, but can be changed if you for example want to do a join, but not include the joined columns.

:as: Specifies a polymorphic interface (See belongs_to).

:through: Specifies a Join Model to perform the query through. Options for :class_name and :foreign_key are ignored, as the association uses the source reflection. You can only use a :through query through a belongs_to or has_many association.

:source: Specifies the source association name used by has_many :through queries. Only use it if the name cannot be inferred from the association. has_many :subscribers, :through =&gt; :subscriptions will look for either +:subscribers+ or +:subscriber+ on Subscription, unless a +:source+ is given.</pre></div><div class="clear"></div><div class="footer">Powered by <a href="http://www.sinatrarb.com/">Sinatra</a>,
<a href="http://puma.io/">Puma</a> and, to a lesser extent,
<a href="http://errtheblog.com/">Err the Blog</a>.</div></body></html>