---
task_simple: ! "task Simple Usage\n[http://taskwarrior.org task]\n\nLet us begin by
  adding some tasks:\n\n-------\n\n% task add Book plane ticket\n% task add Rent a
  tux\n% task add Reserve a rental car\n% task add Reserve a hotel room\n\n-------\n\nThat's
  it. You'll notice immediately that task has a very minimalist\ninterface. Let us
  take a look at those tasks:\n\n-------\n\n% task ls\n\nID Project Pri Description\n
  1             Book plane ticket\n 2             Rent a tux\n 3             Reserve
  a rental car\n 4             Send John a birthday card\n\n-------\n\nThe 'ls' command
  provides the most minimal list of tasks. Each task has been\ngiven an id number,
  and you can see that there are no projects or priorities\nassigned. Wait a minute
  - I own a tux, I don't need to rent one. Let us delete\ntask 2:\n\n-------\n\n%
  task 2 delete\nPermanently delete task? (y/n) y\n\n-------\n\nTask wants you to
  confirm deletions. To remove the confirmation, edit your\n.taskrc file and change
  the line:\n\n-------\n\nconfirmation=yes\n\n-------\n\nto have a value of \"no\".\n\nWhile
  the use of projects and priorities are not essential to benefitting from\ntask,
  they can be very useful when the list of tasks grows large. Let's assign\na project
  to these tasks:\n\n\n-------\n\n% task 1 project:Wedding\n% task 3 project:Wedding\n%
  task 4 project:Family\n% task ls\n\n  ID Project Pri Description\n   3 Family      Send
  John a birthday card\n   2 Wedding     Reserve a rental car\n   1 Wedding     Book
  plane ticket\n\n-------\n\nNotice that the id numbers have changed. When tasks get
  deleted, or have their\nattributes changed (project, for example), the ids are prone
  to change. But\nthe id numbers will remain valid until the next 'ls' command is
  run. You\nshould only use the ids from the most recent 'ls' command. The ids change,\nbecause
  task is always trying to use small numbers so that it is easy for you\nto enter
  them correctly. Now that projects are assigned, we can look at just\nthe Wedding
  project tasks:\n\nSubprojects are supported. If you have a project \"Wedding\",
  you can specify\nthat a task is a subproject \"Transport\" of \"Wedding\" by assigning
  the project\n\"Wedding.Transport\". Let's do this:\n\n\n-------\n\n% task 2 project:Wedding.Transport\n%
  task ls\n\nID Project           Pri Description\n 3 Family                Send John
  a birthday card\n 2 Wedding.Transport     Reserve a rental car\n 1 Wedding               Book
  plane ticket\n\n-------\n\nTask matches the leftmost part of the project when searching,
  so projects may\nbe abbreviated:\n\n\n-------\n\n% task ls project:Wedding.Tra\n\nID
  Project           Pri Description\n 2 Wedding.Transport     Reserve a rental car\n\n-------\n\nThis
  way of matching projects can be used to see all tasks under the \"Wedding\"\nproject
  and all subprojects:\n\n\n-------\n\n% task ls project:Wedding\n\nID Project           Pri
  Description\n 2 Wedding.Transport     Reserve a rental car\n 1 Wedding               Book
  plane ticket\n\n-------\n\nLet's reassign 2 back to the \"Wedding\" project:\n\n\n-------\n\n%
  task 2 project:Wedding\n\n-------\n\nNow that projects are assigned, we can look
  at just the Wedding project tasks:\n\n\n-------\n\n% task ls project:Wedding\n\nID
  Project Pri Description\n 1 Wedding     Book plane ticket\n 2 Wedding     Reserve
  a rental car\n\n-------\n\nAny command arguments after the 'ls' are used for filtering
  the output. We\ncould also have requested:\n\n\n-------\n\n% task ls ticket plane\n\nID
  Project Pri Description\n 1 Wedding     Book plane ticket\n\n-------\n\nNow let's
  prioritize. Priorities can be H, M or L (High, Medium, Low).\n\n\n-------\n\n% task
  ls\n\nID Project Pri Description\n 3 Family      Send John a birthday card\n 2 Wedding
  \    Reserve a rental car\n 1 Wedding     Book plane ticket\n\n% task 1 priority:H\n%
  task 2 prior:M\n% task 3 pr:H\nAmbiguous attribute 'pr' - could be either of project,
  priority\n% task 3 pri:H\n% task ls\n\nID Project Pri Description\n 3 Family  H
  \  Send John a birthday card\n 1 Wedding H   Book plane ticket\n 2 Wedding M   Reserve
  a rental car\n\n-------\n\nNotice that task supports the abbreviation of words such
  as priority, project.\nPriority can be abbreviated to pri, but not pr, because it
  is ambiguous. Now\nthat tasks have been prioritized, you can see that the tasks
  are being sorted\nby priority, with the highest priority tasks at the top.\n\nThese
  attributes can all be provided when the task is added, instead of\napplying them
  afterwards, as shown. The following command shows how to set all\nthe attributes
  at once:\n\n\n-------\n\n% task add project:Wedding priority:H Book plane ticket\n\n-------\n\nThe
  'ls' command provides the least information for each task. The 'list' command provides
  more:\n\n-------\n\n% task list\n\nID Project Pri Due Active Age    Description\n
  3 Family  H              4 mins Send John a birthday card\n 1 Wedding H              5
  mins Book plane ticket\n 2 Wedding M              5 mins Reserve a rental car\n\n-------\n\nNotice
  that a task can have a due date, and can be active. The task lists are\nsorted by
  due date, then priority. Let's add due dates:\n\n\n-------\n\n% task 3 due:6/25/2008\n%
  task 1 due:7/31/2008\n% task list\n\nID Project Pri Due       Active Age    Description\n
  3 Family  H   6/25/2008        6 mins Send John a birthday card\n 1 Wedding H   7/31/2008
  \       7 mins Book plane ticket\n 2 Wedding M                    7 mins Reserve
  a rental car\n\n-------\n\nIf today's date is 6/23/2008, then task 3 is due in 2
  days. It will be colored\nyellow if your terminal supports color. To change this
  color, edit your\n.taskrc file, and change the line to one of these alternatives:\n\n-------\n\ncolor.due=red\ncolor.due=on_blue\ncolor.due=red
  on_blue\ncolor.due=bold_red on_blue\n\n-------\n\nWhere color is one of the following:\n\nblack\nblue\nred\ngreen\ncyan\nmagenta\nyellow\nwhite\n\nAll
  colors are specified in this way. Take a look in .taskrc for all the other\ncolor
  rules that you control.\n\nTagging tasks is a good way to group them, aside from
  specifying a project. To\nadd a tag to a task:\n\n\n-------\n\n% task <id> +tag\n\n-------\n\nThe
  plus sign indicates that this is a tag. Any number of tags may be applied\nto a
  task, and then used for searching. Tags are just single words that are\nlabels.\n\n\n-------\n\n%
  task list\n\nID Project Pri Due       Active Age    Description\n 3 Family  H   6/25/2008
  \       8 mins Send John a birthday card\n 1 Wedding H   7/31/2008        9 mins
  Book plane ticket\n 2 Wedding M                    9 mins Reserve a rental car\n\n%
  task 1 +phone\n% task 2 +phone\n% task 3 +shopping\n% task 3 +john\n\n% task list
  +phone\n\nID Project Pri Due       Active Age    Description\n 1 Wedding H   7/31/2008
  \       9 mins Book plane ticket\n 2 Wedding M                    9 mins Reserve
  a rental car\n\n-------\n\nTo remove a tag from a task, use the minus sign:\n\n-------\n\n%
  task 3 -john\n\n-------"
