---
jasmine: ! "Jasmine Javascript BDD Framework\r\nhttp://github.com/pivotal/jasmine\r\nhttp://groups.google.com/group/jasmine-js\r\n\r\nSpecs\r\n===================\r\nit('should
  be a test', function () {\r\n  var foo = 0;\r\n  foo++;\r\n});\r\n\r\nExpectations\r\n===================\r\n\r\nit('should
  be a test', function () {\r\n  var foo = 0;            // set up the world\r\n  foo++;
  \                 // call your application code\r\n\r\n  expect(foo).toEqual(1);
  // passes because foo == 1\r\n});\r\n\r\n\r\nMatchers\r\n===================\r\n\r\nexpect(x).toEqual(y);
  // compares objects or primitives x and y and passes if they are equivalent\r\n\r\nexpect(x).toMatch(pattern);
  // compares x to string or regular expression pattern and passes if they match\r\n\r\nexpect(x).toBeDefined();
  // passes if x is not undefined\r\n\r\nexpect(x).toBeNull(); // passes if x is null\r\n\r\nexpect(x).toBeTruthy();
  // passes if x evaluates to true\r\n\r\nexpect(x).toBeFalsy(); // passes if x evaluates
  to false\r\n\r\nexpect(x).toContain(y); // passes if array or string x contains
  y\r\n\r\nEvery matcher's criteria can be inverted by prepending .not:\r\n\r\nexpect(x).not.toEqual(y);
  // compares objects or primitives x and y and passes if they are not equivalent\r\n\r\nSuites\r\n===================\r\n//
  Specs are grouped in Suites. Suites are defined using the global describe() function:\r\ndescribe('One
  suite', function () {\r\n  it('has a test', function () {\r\n    ...\r\n  });\r\n\r\n
  \ it('has another test', function () {\r\n    ...\r\n  });\r\n});\r\n\r\n\r\nbeforeEach\r\n===================\r\nvar
  runnerWideFoo = [];\r\n\r\nbeforeEach(function () {\r\n  runnerWideFoo.push('runner');\r\n});\r\n\r\ndescribe('some
  suite', function () {\r\n\r\n  beforeEach(function () {\r\n    runnerWideFoo.push('suite');\r\n
  \ });\r\n\r\n  it('should equal bar', function () {\r\n    expect(runnerWideFoo).toEqual(['runner',
  'suite']);\r\n  });\r\n});\r\n\r\n\r\nSingle-spec After functions\r\n===================\r\ndescribe('some
  suite', function () {\r\n  it(function () {\r\n    var originalTitle = window.title;\r\n
  \   this.after(function() { window.title = originalTitle; });\r\n    MyWindow.setTitle(\"new
  value\");\r\n    expect(window.title).toEqual(\"new value\");\r\n  });\r\n});\r\n\r\n\r\nSpies\r\n===================\r\nvar
  Klass = function () {\r\n};\r\n\r\nvar Klass.prototype.method = function (arg) {\r\n
  \ return arg;\r\n};\r\n\r\nvar Klass.prototype.methodWithCallback = function (callback)
  {\r\n  return callback('foo');\r\n};\r\n\r\nit('should spy on Klass#method') {\r\n
  \ spyOn(Klass, 'method');\r\n  Klass.method('foo argument');\r\n\r\n  expect(Klass.method).wasCalledWith('foo
  argument');\r\n});\r\n\r\nit('should spy on Klass#methodWithCallback') {\r\n  var
  callback = jasmine.createSpy();\r\n  Klass.methodWithCallback(callback);\r\n\r\n
  \ expect(callback).wasCalledWith('foo');\r\n});\r\n\r\n\r\n//Spies can be very useful
  for testing AJAX or other asynchronous behaviors that take callbacks by faking the
  method firing an async call.\r\nvar Klass = function () {\r\n};\r\n\r\nvar Klass.prototype.asyncMethod
  = function (callback) {\r\n  someAsyncCall(callback);\r\n};\r\n\r\n...\r\n\r\nit('should
  test async call') {\r\n  spyOn(Klass, 'asyncMethod');\r\n  var callback = jasmine.createSpy();\r\n\r\n
  \ Klass.asyncMethod(callback);\r\n  expect(callback).wasNotCalled();\r\n\r\n  var
  someResponseData = 'foo';\r\n  Klass.asyncMethod.mostRecentCall.args[0](someResponseData);\r\n
  \ expect(callback).wasCalledWith(someResponseData);\r\n\r\n});\r\n\r\n// There are
  spy-specfic matchers that are very handy.\r\nexpect(x).wasCalled() // passes if
  x is a spy and was called\r\n\r\nexpect(x).wasCalledWith(arguments) // passes if
  x is a spy and was called with the specified arguments\r\n\r\nexpect(x).wasNotCalled()
  // passes if x is a spy and was not called\r\n\r\nexpect(x).wasNotCalledWith(arguments)
  // passes if x is a spy and was not called with the specified arguments\r\n\r\n\r\n//
  Spies can be trained to respond in a variety of ways when invoked:\r\nspyOn(x, 'method').andCallThrough()
  // spies on AND calls the original function spied on\r\n\r\nspyOn(x, 'method').andReturn(arguments)
  // returns passed arguments when spy is called\r\n\r\nspyOn(x, 'method').andThrow(exception)
  // throws passed exception when spy is called\r\n\r\nspyOn(x, 'method').andCallFake(function)
  // calls passed function when spy is called\r\n\r\n\r\n// Spies have some useful
  properties:\r\ncallCount // returns number of times spy was called\r\n\r\nmostRecentCall.args
  // returns argument array from last call to spy.\r\n\r\nargsForCall[i] // returns
  arguments array for call i to spy.\r\n\r\n// Spies are automatically removed after
  each spec. They may be set in the beforeEach function.\r\n\r\n\r\nAsynchronous Specs\r\n===================\r\nit('should
  be a test', function () {\r\n  runs(function () {\r\n    this.foo = 0;\r\n    var
  that = this;\r\n    setTimeout(function () {\r\n      that.foo++;\r\n    }, 250);\r\n
  \ });\r\n\r\n  runs(function () {\r\n    this.expects(this.foo).toEqual(0);\r\n
  \ });\r\n\r\n  waits(500);\r\n\r\n  runs(function () {\r\n    this.expects(this.foo).toEqual(1);\r\n
  \ });\r\n});"
