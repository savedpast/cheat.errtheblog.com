---
php_strtotime: ! "Parse about any English textual datetime description into a Unix
  timestamp.\r\n\r\n    int strtotime ( string $time [, int $now ] )\r\n\r\nThe function
  expects to be given a string containing an English date format and will try to parse
  that format into a Unix timestamp (the number of seconds since January 1 1970 00:00:00
  UTC), relative to the timestamp given in now, or the current time if now is not
  supplied.\r\n\r\nThis function will use the TZ environment variable (if available)
  to calculate the timestamp. Since PHP 5.1.0 there are easier ways to define the
  timezone that is used across all date/time functions. That process is explained
  in the date_default_timezone_get() function page. \r\n\r\nReturn Values\r\n\r\nReturns
  a timestamp on success, FALSE otherwise. Previous to PHP 5.1.0, this function would
  return -1 on failure.\r\n\r\nErrors/Exceptions\r\n\r\nEvery call to a date/time
  function will generate a E_NOTICE if the time zone is not valid, and/or a E_STRICT
  or E_WARNING message if using the system settings or the TZ environment variable.
  See also date_default_timezone_set()\r\n\r\nExample #1 A strtotime() example\r\n\r\n
  \   <?php\r\n    echo strtotime(\"now\"), \"\\n\";\r\n    echo strtotime(\"10 September
  2000\"), \"\\n\";\r\n    echo strtotime(\"+1 day\"), \"\\n\";\r\n    echo strtotime(\"+1
  week\"), \"\\n\";\r\n    echo strtotime(\"+1 week 2 days 4 hours 2 seconds\"), \"\\n\";\r\n
  \   echo strtotime(\"next Thursday\"), \"\\n\";\r\n    echo strtotime(\"last Monday\"),
  \"\\n\";\r\n    ?>\r\n\r\nExample #2 Checking for failure\r\n\r\n    <?php\r\n    $str
  = 'Not Good';\r\n    \r\n    // previous to PHP 5.1.0 you would compare with -1,
  instead of false\r\n    if (($timestamp = strtotime($str)) === false) {\r\n        echo
  \"The string ($str) is bogus\";\r\n    } else {\r\n        echo \"$str == \" . date('l
  dS \\o\\f F Y h:i:s A', $timestamp);\r\n    }\r\n    ?>\r\n"
