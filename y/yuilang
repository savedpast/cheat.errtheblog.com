---
yuilang: ! "YAHOO.lang\n==========\n\n= augment\nstatic void augment ( r , s , arguments
  )\nSame as YAHOO.lang.augmentObject, except it only applies prototype properties.
  This is an alias for augmentProto.\n\nParameters:\n    r <Function> the object to
  receive the augmentation \n    s <Function> the object that supplies the properties
  to augment \n    arguments <String*|boolean> zero or more properties methods to
  augment the receiver with. If none specified, everything in the supplier will be
  used unless it would overwrite an existing property in the receiver. if true is
  specified as the third parameter, all properties will be applied and will overwrite
  an existing property in the receiver \n\nReturns: void\n\naugmentObject\nstatic
  void augmentObject ( r , s , arguments )\nApplies all properties in the supplier
  to the receiver if the receiver does not have these properties yet. Optionally,
  one or more methods/properties can be specified (as additional parameters). This
  option will overwrite the property if receiver has it already. If true is passed
  as the third parameter, all properties will be applied and _will_ overwrite properties
  in the receiver.\n\nParameters:\n    r <Function> the object to receive the augmentation
  \n    s <Function> the object that supplies the properties to augment \n    arguments
  <String*|boolean> zero or more properties methods to augment the receiver with.
  If none specified, everything in the supplier will be used unless it would overwrite
  an existing property in the receiver. If true is specified as the third parameter,
  all properties will be applied and will overwrite an existing property in the receiver
  \n\nReturns: void\n\n= augmentProto\nstatic void augmentProto ( r , s , arguments
  )\nSame as YAHOO.lang.augmentObject, except it only applies prototype properties\n\nParameters:\n
  \   r <Function> the object to receive the augmentation \n    s <Function> the object
  that supplies the properties to augment \n    arguments <String*|boolean> zero or
  more properties methods to augment the receiver with. If none specified, everything
  in the supplier will be used unless it would overwrite an existing property in the
  receiver. if true is specified as the third parameter, all properties will be applied
  and will overwrite an existing property in the receiver \n\nReturns: void\n\n= dump\nString
  dump ( o , d )\nReturns a simple string representation of the object or array. Other
  types of objects will be returned unprocessed. Arrays are expected to be indexed.
  Use object notation for associative arrays.\n\nParameters:\n    o <Object> The object
  to dump \n    d <int> How deep to recurse child objects, default 3 \n\nReturns:
  String\n    the dump result\n\n= extend\nstatic void extend ( subc , superc , overrides
  )\nUtility to set up the prototype, constructor and superclass properties to support
  an inheritance strategy that can chain constructors and methods. Static members
  will not be inherited.\n\nParameters:\n    subc <Function> the object to modify
  \n    superc <Function> the object to inherit \n    overrides <Object> additional
  properties/methods to add to the subclass prototype. These will override the matching
  items obtained from the superclass if present. \n\nReturns: void\n\n= hasOwnProperty\nboolean
  hasOwnProperty ( o , prop )\nDetermines whether or not the property was added to
  the object instance. Returns false if the property is not present in the object,
  or was inherited from the prototype. This abstraction is provided to enable hasOwnProperty
  for Safari 1.3.x. There is a discrepancy between YAHOO.lang.hasOwnProperty and Object.prototype.hasOwnProperty
  when the property is a primitive added to both the instance AND prototype with the
  same value:\n\nvar A = function() {};\nA.prototype.foo = 'foo';\nvar a = new A();\na.foo
  = 'foo';\nalert(a.hasOwnProperty('foo')); // true\nalert(YAHOO.lang.hasOwnProperty(a,
  'foo')); // false when using fallback\n\nParameters:\n    o <any> The object being
  testing \n    prop <string> the name of the property to test \n\nReturns: boolean\n
  \   the result\n\n= isArray\nboolean isArray ( o )\nDetermines wheather or not the
  provided object is an array.\n\nParameters:\n    o <any> The object being testing
  \n\nReturns: boolean\n    the result\n\n= isBoolean\nboolean isBoolean ( o )\nDetermines
  whether or not the provided object is a boolean\n\nParameters:\n    o <any> The
  object being testing \n\nReturns: boolean\n    the result\n\n= isFunction\nboolean
  isFunction ( o )\nDetermines whether or not the provided object is a function. Note:
  Internet Explorer thinks certain functions are objects: var obj = document.createElement(\"object\");
  YAHOO.lang.isFunction(obj.getAttribute) // reports false in IE var input = document.createElement(\"input\");
  // append to body YAHOO.lang.isFunction(input.focus) // reports false in IE You
  will have to implement additional tests if these functions matter to you.\n\nParameters:\n
  \   o <any> The object being testing \n\nReturns: boolean\n    the result\n\n= isNull\nboolean
  isNull ( o )\nDetermines whether or not the provided object is null\n\nParameters:\n
  \   o <any> The object being testing \n\nReturns: boolean\n    the result\n\n= isNumber\nboolean
  isNumber ( o )\nDetermines whether or not the provided object is a legal number\n\nParameters:\n
  \   o <any> The object being testing \n\nReturns: boolean\n    the result\n\n= isObject\nboolean
  isObject ( o )\nDetermines whether or not the provided object is of type object
  or function\n\nParameters:\n    o <any> The object being testing \n\nReturns: boolean\n
  \   the result\n\n= isString\nboolean isString ( o )\nDetermines whether or not
  the provided object is a string\n\nParameters:\n    o <any> The object being testing
  \n\nReturns: boolean\n    the result\n\n= isUndefined\nboolean isUndefined ( o )\nDetermines
  whether or not the provided object is undefined\n\nParameters:\n    o <any> The
  object being testing \n\nReturns: boolean\n    the result\n\n= isValue\nboolean
  isValue ( o )\nA convenience method for detecting a legitimate non-null value. Returns
  false for null/undefined/NaN, true for other values, including 0/false/''\n\nParameters:\n
  \   o <any> the item to test \n\nReturns: boolean\n    true if it is not null/undefined/NaN
  || false\n\n= later\nlater ( when , o , fn , data , periodic )\nExecutes the supplied
  function in the context of the supplied object 'when' milliseconds later. Executes
  the function a single time unless periodic is set to true.\n\nParameters:\n    when
  <int> the number of milliseconds to wait until the fn is executed \n    o <object>
  the context object \n    fn <Function|String> the function to execute or the name
  of the method in the 'o' object to execute \n    data <object> [Array] data that
  is provided to the function. This accepts either a single item or an array. If an
  array is provided, the function is executed with one parameter for each array item.
  If you need to pass a single array parameter, it needs to be wrapped in an array
  [myarray] \n    periodic <boolean> if true, executes continuously at supplied interval
  until canceled \n\n= merge\nmerge ( arguments )\nReturns a new object containing
  all of the properties of all the supplied objects. The properties from later objects
  will overwrite those in earlier objects.\n\nParameters:\n    arguments <Object*>
  the objects to merge \n\nsubstitute\nString substitute ( s , o , f )\nDoes variable
  substitution on a string. It scans through the string looking for expressions enclosed
  in { } braces. If an expression is found, it is used a key on the object. If there
  is a space in the key, the first word is used for the key and the rest is provided
  to an optional function to be used to programatically determine the value (the extra
  information might be used for this decision). If the value for the key in the object,
  or what is returned from the function has a string value, number value, or object
  value, it is substituted for the bracket expression and it repeats. If this value
  is an object, it uses the Object's toString() if this has been overridden, otherwise
  it does a shallow dump of the key/value pairs.\n\nParameters:\n    s <String> The
  string that will be modified. \n    o <Object> An object containing the replacement
  values \n    f <Function> An optional function that can be used to process each
  match. It receives the key, value, and any extra metadata included with the key
  inside of the braces. \n\nReturns: String\n    the substituted string\n\n= trim\nstring
  trim ( s )\nReturns a string without any leading or trailing whitespace. If the
  input is not a string, the input will be returned untouched.\n\nParameters:\n    s
  <string> the string to trim \n\nReturns: string\n    the trimmed string"
