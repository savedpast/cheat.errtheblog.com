---
scala: ! "* Collection of Notes about Scala Programming Language *\n\n* The basics\n\n**
  How to read from STDIN: Source.fromInputStream(System.in)\n\n* Data types\n\n* Control
  structures and Logical expressions\n** About Case expressions :\n   You can use
  '|' to combine various case options.\n** You can't use break or continute, use boolean
  variables in place.\n\n* Function and methods\n** When passing arguments to a method,
  you should enclose the argument in () if\n   they also explicitly specify type.\n**
  You should always use = to define methods.\n** You can use somewhat ugly () to return
  Unit from a method.\n** backend_connection? is a invalid method name, while backend_conneciton_?\n
  \  isn't.\n** For using variadic functions, one should specify type with a * suffix.\n
  \  def helloWorld(arg: Int*) = { }\n   One can use Any* for generic types.\n** Scala
  compiler won't do type inference for function calls and hence type\n   must be specified
  while defining the functions.\n\n** The equals sign that precedes the body of a
  function hints that in\n   the functional world view, a function defines an expression
  that results in a\n   value.\n\n** Partial Applied Functions :\n** A method name
  that ends with \":\" is applied right to left and hence a:::b\n   will apply as
  b.:::(a)\n** When you are invoking a method that takes tuples as parameters, you
  should\n   surround it with additional parenthesis. For example:\n\n   Following
  invocation won't pass a tuple.\n     tSet += (\"Air\",\"Tel\")\n\n   But if you
  have to pass a tuple:\n     tSet.takesTuple((\"Air\",\"Tel\"))\n** 1 -> \"lol\"
  will return a two element tuple. The mechanism which allows us to\n   invoke ->
  on any object is called implicits in scala.\n\n** One gotcha to watch out for is
  that whenever you leave off the equals sign\n   before the body of a method, its
  result type will definitely be Unit.\n\n** When you are using Method chaining, you
  should always put the operator at\n   the end.\n\n* Classes and Object Orientation\n**
  When you use Method overloading, you must specify return type clearly.\n** When
  a class inherits another class, default constructor is generally\n   automatically
  invoked, and you need not do any extra work for that.\n\n** The parameters passed
  to a class for construction become private val fields\n   for the class.\n\n** In
  java uninitialized fields of a class are initialized to default values\n   such
  as null,0 or false depending on their type if no value is provided for\n   them
  in class definition.\n   We can achieve the same effect in scala, by using:\n\n
  \     var x: Int = _\n\n** When a Singleton shares same name with the class template
  its called\n   companion object for the class.  You must define class and its companion\n
  \  object in the same file.\n** one can use keyword 'require' in class definition
  for asserting arguments\n   passed while instantiating the object. For example:\n
  \    class Rational(n: Int,d: Int) {\n       require(d != 0)\n       override def
  toString = n + \"/\" + d\n     }\n** In scala, in body on any auxiliary constructor,
  first method call should be\n   of, another constructor of the same class. Called
  constructor can be primary\n   contructor or another auxiliary constructor which
  comes textually before\n   current contructor.  This rule is enforced because in
  Scala only primary\n   contructor can invoke superclass constructors.\n\n* Case
  class and Pattern Matching\n** Since, case classes come predefined with their Factories
  for object\n   creation, you don't need to call new on them, but you must use ()
  for\n   creating objects, even if case class constructor doesn't accept any\n   parameters.\n\n*
  Functional Programming Primitives\n\n* Language Specific Miscellenany\n** Use split
  with care.\n** Scala operator precedence table:\n   nfix (least to highest precedence)\n\n
  \  |\n   ^\n   &\n   < >\n   = !\n   :\n   + -\n   * / %\n   ~\n\n   Postfix (unary_)\n\n
  \  +\n   -\n   !\n   ~\n\n   Operators ending with colon (:) are right-associative.\n\n*
  Concurrent Programming Concepts\n\n* Scala Collection Classes\n** HashMaps and TreeMaps
  are based on RedBlackTrees and you often don't need\n   them for a simple hash type
  of functionality.\n** Another simple and easy to use data structure is Map.\n   scala>
  val map = scala.collection.mutable.Map[String,Int]()\n   map: scala.collection.mutable.Map[String,Int]
  = Map()\n\n   scala> map(\"Hello\") = 1\n\n   scala> map(\"World\") = 2\n\n   scala>
  map.contains(\"Hello\")\n   res39: Boolean = true\n** If you are looking for 'join'
  method in scala, use mkString in place of join.\n\n* Scala Type System\n\n** In
  scala value assigned to a variable created with val can't be changed, but\n   often
  in the interpreter its possible. The behaviour of interpretor is\n   confusing.\n\n**
  In scala, a val can be reassigned to some other value by defining the value\n   in
  \ a new scope. For example, following code won't compile:\n\n   val a = 1\n   val
  a = 2\n   println(a)\n\n   But following code will compile:\n\n   val a = 1\n   {\n
  \    val a = 2\n     println(a)\n   }\n   println(a)\n\n   In this case an inner
  variable is said to \"shadow\" an outer variable.\n\n* Language Tools\n\n** To compile
  a scala file\n   scalac HelloWorld.scala\n\n** Compile scala file to different location:\n
  \  By default scalac generates the class files to the same location as the\n   corresponding
  source files.\n   You may specify a different output directory using the -d option.\n\n
  \  scalac -d classes HelloWorld.scala\n\n** To run a compiled scala file\n   scala
  HelloWorld\n\n* UnAnswered Questions:\n** What are those link and unlink methods
  in Actor class.\n   link and unlink are generally used to link Actors so as one
  actor can\n   monitor and vice-versa.\n** How to globally identify an Actor without
  defining it as a singleton."
