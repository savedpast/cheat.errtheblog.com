---
rope: ! "# updated as of Ruby Reports 0.6.1\n\nrope is a simple tool that comes with
  Ruport that will drop a directory structure for you and generate some boilerplate
  code / config files. To try it out, just type rope myprojname on the command line.\n\nOnce
  you do this, you should see something like this:\n\nbash-3.1$ ls my_proj_name/\nRakefile
  \ app  config  data  log  output  sql  templates  test  util\n\nThis has given you
  a rake file, a simple config file(config/ruport_config.rb), hooks for Ruport's logging
  system, and a two simple applications.\nbuild.rb\n\nThe first is util/build.rb .
  This will eventually enable generating all sorts of components for Ruport, but right
  now can be used to generate report files.\n\nExample:\n\nruby util/build.rb report
  my_report\n\nNow when you run rake test, you'll see something like this:\n\n\n  1)
  Failure:\ntest_flunk(TestMyReport) [./test/test_my_report.rb:9]:\nWrite your real
  tests here or in any test/test_* file.\n\nSo you have a test already for your report,
  and your report file has been stowed in app/reports, waiting for you to begin working
  on it. This has put in the necessary boilerplate to set up a Ruport Report, hooked
  into the default configuration file, and enabled logging to work out of the box.\n\nsql_exec.rb\n\nyou
  can point this script at an SQL file and run it. This will respond by printing the
  results as text to STDOUT. This is a good way to check that your configuration file
  is hooked up properly and also a way to check if any query files you have are working.
  You can also provide SQL on STDIN, if that is helpful to you."
