---
moneta: ! "Here's a quick cheat sheet for wycat's moneta cache (http://github.com/wycats/moneta)\r\n\r\n\r\nInstantiate
  the cache:\r\n======================\r\n\r\nCreate a Moneta::Memory cache store:\r\n>>
  require 'moneta'\r\n>> require 'moneta/memory'\r\n>> cache = Moneta::Memory.new\r\n\r\nCreate
  a Moneta::BasicFile cache store:\r\n>> require 'moneta'\r\n>> require 'moneta/basic_file'\r\n>>
  cache = Moneta::BasicFile.new(:path => 'my_cache_dir')\r\n\r\n\r\nUse the cache:\r\n==============\r\n\r\nBasic
  Usage:\r\n>> cache['my_key'] = 'my_value'\r\n=> \"my_value\"\r\n>> cache['my_key']\r\n=>
  \"my_value\"\r\n\r\nSet an expiration:\r\n>> cache.store('my_2nd_key', 'my_2nd_value',
  :expires => 100)\r\n>> cache['my_2nd_key']\r\n=> \"my_2nd_value\"\r\n\r\n\r\n\r\nThe
  API:\r\n========\r\n\r\n#initialize(options)::\r\nOptions differs per-store, and
  is used to set up the store.\r\n\r\n#[](key)::\r\nRetrieve a key. if the key is
  not available, return nil.\r\n\r\n#[]=(key, value)::\r\nSet a value for a key. if
  the key is already used, clobber it. Keys set using []= will never expire.\r\n\r\n#delete(key)::\r\nDelete
  the key from the store and return the current value.\r\n\r\n#key?(key)::\r\ntrue
  if the key exists, false if it does not\r\n\r\n#has_key?(key)::\r\nAlias for key?\r\n\r\n#store(key,
  value, options)::   \r\nSame as []=, but you can supply an :expires_in option, which
  will specify a number of seconds before the key should expire. In order to support
  the same features across all stores, only full seconds are supported.\r\n\r\n#update_key(key,
  options)::     \r\nUpdates an existing key with a new :expires_in option. If the
  key has already expired, it will not be updated.\r\n\r\n#clear::                        \r\nClear
  all keys in this store."
