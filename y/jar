---
jar: ! "Combines multiple files into a single JAR archive file.\r\n\r\nSYNOPSIS\r\n\r\nCreate
  jar file\r\n\tjar c[v0M]f jarfile [-C dir] inputfiles [-Joption]\r\n\tjar c[v0]mf
  manifest jarfile [-C dir] inputfiles [-Joption]\r\n\tjar c[v0M] [-C dir] inputfiles
  [-Joption]\r\n\tjar c[v0]m manifest [-C dir] inputfiles [-Joption]\r\n\r\nUpdate
  jar file\r\n\tjar u[v0M]f jarfile [-C dir] inputfiles [-Joption]\r\n\tjar u[v0]mf
  manifest jarfile [-C dir] inputfiles [-Joption]\r\n\tjar u[v0M] [-C dir] inputfiles
  [-Joption]\r\n\tjar u[v0]m manifest [-C dir] inputfiles [-Joption]\r\n\r\nExtract
  jar file\r\n\tjar x[v]f jarfile [inputfiles] [-Joption]\r\n\tjar x[v] [inputfiles]
  [-Joption]\r\n\r\nList table of contents of jar file\r\n\tjar t[v]f jarfile [inputfiles]
  [-Joption]\r\n\tjar t[v] [inputfiles] [-Joption]\r\n\r\nAdd index to jar file\r\n\tjar
  i jarfile [-Joption]\r\n\r\n\r\nwhere:\r\n\tcuxtiv0Mmf\r\n\t\tOptions that control
  the jar command.\r\n\tjarfile\r\n\t\tJar file to be created (c), updated (u), extracted
  (x),\r\n\t\tor have its table of contents viewed (t). The f option and\r\n\t\tfilename
  jarfile are a pair -- if either is present, they must \r\n\t\tboth appear. Note
  that omitting f and jarfile accepts a \"jar\r\n\t\tfile\" from standard input (for
  x and t) or sends the\r\n\t\t\"jar file\" to standard output (for c and u).\r\n\tinputfiles\r\n\t\tFiles
  or directories, separated by spaces, to be combined\r\n\t\tinto jarfile (for c and
  u), or to be extracted (for x) or\r\n\t\tlisted (for t) from jarfile. All directories
  are processed\r\n\t\trecursively. The files are compressed unless option O (zero)\r\n\t\tis
  used.\r\n\tmanifest\r\n\t\tPre-existing manifest file whose name: value pairs are
  to\r\n\t\tbe included in MANIFEST.MF in the jar file. The m option and\r\n\t\tfilename
  manifesfile are a pair -- if either is present, they\r\n\t\tmust both appear. The
  letters m and f must appear in the same\r\n\t\torder that manifest and jarfile appear.\r\n\t-C
  dir\r\n\t\tTemporarily changes directories to dir while processing the\r\n\t\tfollowing
  inputfiles argument. Multiple -C dir inputfiles sets\r\n\t\tare allowed.\r\n\t-Joption\r\n\t\tOption
  to be passed into the Java runtime environment. \r\n\t\t(There must be no space
  between -J and option).\r\n\r\n\r\nDESCRIPTION\r\n\r\nThe jar tool combines multiple
  files into a single JAR archive file. jar is a general-purpose archiving and compression
  tool, based on ZIP and the ZLIB compression format. However, jar was designed mainly
  to facilitate the packaging of java applets or applications into a single archive.
  When the components of an applet or application (.class files, images and sounds)
  are combined into a single archive, they may be downloaded by a java agent (like
  a browser) in a single HTTP transaction, rather than requiring a new connection
  for each piece. This dramatically improves download times. jar also compresses files
  and so further improves download time. In addition, it allows individual entries
  in a file to be signed by the applet author so that their origin can be authenticated.
  The syntax for the jar tool is almost identical to the syntax for the tar command.
  A jar archive can be use as a class path entry, whether it is compressed or not.\r\n\r\nTypical
  usage to combine files into a jar file is:\r\n\r\n\tC:\\Java> jar cf myFile.jar
  *.class\r\n\r\nIn this example, all the class files in the current directory are
  placed into the file named \"myFile.jar\". A manifest file entry named META-INF/MANIFEST.MF
  is automatically generated by the jar tool and is always the first entry in the
  jar file. The manifest file is the place where any meta-information about the archive
  is stored as name: value pairs. Refer to the JAR file specification for details
  about how meta-information is stored in the manifest file.\r\nIf you have a pre-existing
  manifest file whose name: value pairs you want the jar tool to include for the new
  jar archive, you can specify it using the m option:\r\n\r\n\tC:\\Java> jar cmf myManifestFile
  myFile.jar *.class\r\n\r\nBe sure that any pre-existing manifest file that you use
  ends with a new line. The last line of a manifest file will not be parsed if it
  doesn't end with a new line character. Note that when you specify \"cfm\" instead
  of \"cmf\" (i.e., you invert the order of the \"m\" and \"f\" options), you need
  to specify the name of the jar archive first, followed by the name of the manifest
  file:\r\n\r\n\tC:\\Java> jar cfm myFile.jar myManifestFile *.class\r\n\r\nThe manifest
  is in a text format inspired by RFC822 ASCII format, so it is easy to view and process
  manifest-file contents.\r\n\r\nTo extract the files from a jar file, use x, as in:\r\n\r\n\tC:\\Java>
  jar xf myFile.jar\r\n\r\nTo extract only certain files from a jar file, supply their
  filenames:\r\n\r\n\tC:\\Java> jar xf myFile.jar foo bar\r\n\r\nBeginning with version
  1.3 of the Java 2 SDK, the jar utility supports JarIndex, which allows application
  class loaders to load classes more efficiently from jar files. If an application
  or applet is bundled into multiple jar files,  only the necessary jar files will
  be downloaded and opened to load classes. This performance optimization is enabled
  by running jar with the i option. It will generate package location information
  for the specified main jar file and all the jar files it depends on, which need
  to be specified in the Class-Path attribute of the main jar file's manifest.\r\n\r\n\tC:\\Java>
  jar i main.jar\r\n\r\nIn this example, an INDEX.LIST file is inserted into the META-INF
  directory of main.jar. \r\n\r\nThe application class loader will use the information
  stored in this file for efficient class loading.  Refer to the JarIndex specification
  for details about how location information is stored in the index file.\r\n\r\nA
  standard way to copy directories is to first compress files in dir1 to standard
  out, then extract from standard in to dir2 (omitting f from both jar commands):\r\n\r\n\tC:\\Java>
  (cd dir1; jar c .) | (cd dir2; jar x)\r\n\r\nExamples of using the jar tool to operate
  on jar files and jar file manifests are provided below.\r\n\r\nOPTIONS\r\n\r\nc\r\n\tCreates
  a new archive to file named jarfile (if f is specified) or\r\n\tto standard output
  (if f and jarfile are omitted). Add to it the files\r\n\tand directories specified
  by inputfiles.\r\n\r\nu\r\n\tUpdates an existing file jarfile (when f is specified)
  by adding to it\r\n\tfiles and directories specified by inputfiles. For example:\r\n\tjar
  uf foo.jar foo.class\r\n\twould add the file foo.class to the existing jar file
  foo.jar. The\r\n\tu option can also update the manifest entry, as given by this
  example:\r\n\tjar umf manifest foo.jar\r\n\tupdates the foo.jar manifest with the
  name: value pairs in manifest.\r\n\r\nx\r\n\tExtracts files and directories from
  jarfile (if f is specified) or \r\n\tstandard input (if f and jarfile are omitted).
  If inputfiles is \r\n\tspecified, only those specified files and directories are
  extracted. \r\n\tOtherwise, all files and directories are extracted.\r\n\r\nt\r\n\tLists
  the table of contents from jarfile (if f is specified) or\r\n\tstandard input (if
  f and jarfile are omitted). If inputfiles is \r\n\tspecified, only those specified
  files and directories are listed. \r\n\tOtherwise, all files and directories are
  listed.\r\n\r\ni\r\n\tGenerate index information for the specified jarfile and its\r\n\tdependent
  jar files. For example:\r\n\tjar i foo.jar\r\n\twould generate an INDEX.LIST file
  in foo.jar which contains location \r\n\tinformation for each package in foo.jar
  and all the jar files \r\n\tspecified in the Class-Path attribute of foo.jar. See
  the index example.\r\n\r\nf\r\n\tSpecifies the file jarfile to be created (c), updated
  (u), extracted \r\n\t(x), indexed (i), or viewed (t). The f option and filename
  jarfile \r\n\tare a pair -- if present, they must both appear. Omitting f and \r\n\tjarfile
  accepts a \"jar file\" from standard input (for x and t) or \r\n\tsends the \"jar
  file\" to standard output (for c and u).\r\n\r\nv\r\n\tGenerates verbose output
  to standard output. Examples shown below.\r\n\r\n0\r\n\t(zero) Store without using
  ZIP compression.\r\n\r\nM\r\n\tDo not create a manifest file entry (for c and u),
  or delete a \r\n\tmanifest file entry if one exists (for u).\r\n\r\nm\r\n\tIncludes
  name: value attribute pairs from the specified manifest file\r\n\tmanifest in the
  file at META-INF/MANIFEST.MF. A name: value pair is \r\n\tadded unless one already
  exists with the same name, in which case its \r\n\tvalue is updated.\r\n\r\n\tOn
  the command line, the letters m and f must appear in the same order \r\n\tthat manifest
  and jarfile appear. Example use:\r\n\r\n\t\tjar cmf myManifestFile myFile.jar *.class\r\n\r\n\tYou
  can add special-purpose name: value attribute pairs to the manifest\r\n\tthat aren't
  contained in the default manifest. Examples of such \r\n\tattributes would be those
  for vendor information, version information,\r\n\tpackage sealing, and to make JAR-bundled
  applications executable.\r\n\r\n-C  dir\r\n\tTemporarily changes directories (cd
  dir) during execution of the jar \r\n\tcommand while processing the following inputfiles
  argument. Its \r\n\toperation is intended to be similar to the -C option of the
  UNIX tar \r\n\tutility. For example:\r\n\r\n\t\tjar uf foo.jar -C classes bar.class\r\n\r\n\twould
  change to the classes directory and add the bar.class from that \r\n\tdirectory
  to foo.jar. The following command,\r\n\r\n\t\tjar uf foo.jar -C classes . -C bin
  xyz.class\r\n\r\n\twould change to the classes directory and add to foo.jar all
  files \r\n\twithin the classes directory (without creating a classes directory in
  \r\n\tthe jar file), then change back to the original directory before \r\n\tchanging
  to the bin directory to add xyz.class to foo.jar. If classes \r\n\tholds files bar1
  and bar2, then here's what the jar file would contain \r\n\tusing jar tf foo.jar:\r\n\t\tMETA-INF/\r\n\t\tMETA-INF/MANIFEST.MF\r\n\t\tbar1\r\n\t\tbar2\r\n\t\txyz.class\r\n\r\n-Joption\r\n\tPass
  option to the Java runtime environment, where option is one of \r\n\tthe options
  described on the reference page for the java application \r\n\tlauncher. For example,
  -J-Xmx48M sets the maximum memory to 48 \r\n\tmegabytes. It is a common convention
  for -J to pass options to the \r\n\tunderlying runtime environment.\r\n\r\n\r\nCOMMAND
  LINE ARGUMENT FILES\r\n\r\nTo shorten or simplify the jar command line, you can
  specify one or more files that themselves contain arguments to the jar command (except
  -J options). This enables you to create jar commands of any length, overcoming command
  line limits imposed by the operating system.\r\n\r\nAn argument file can include
  options and filenames. The arguments within a file can be space-separated or newline-separated.
  Filenames within an argument file are relative to the current directory, not the
  location of the argument file. Wildcards (*) that might otherwise be expanded by
  the operating system shell are not expanded. Use of the '@' character to recursively
  interpret files is not supported. The -J options are not supported because they
  are passed to the launcher, which does not support argument files.\r\n\r\nWhen executing
  jar, pass in the path and name of each argument file with the '@' leading character.
  When jar encounters an argument beginning with the character `@', it expands the
  contents of that file into the argument list.\r\n\r\nFor example, you could use
  a single argument file named \"classes.list\" to hold the names of the files:\r\n\tC:\\Java>
  dir /b *.class > classes.list\r\n\r\nThen execute the jar command passing in the
  argfile:\r\n\tC:\\Java> jar cf my.jar @classes.list\r\n\r\nAn argument file can
  be passed in with a path, but any filenames inside the argument file that have relative
  paths are relative to the current working directory, not the path passed in. Here's
  such an example:\r\n\tC:\\Java> jar @path1/classes.list\r\n\r\n\r\nEXAMPLES\r\n\r\nTo
  add all the files in a particular directory to an archive (overwriting contents
  if the archive already exists). Enumerating verbosely (with the \"v\" option) will
  tell you more information about the files in the archive, such as their size and
  last modified date.\r\n\r\nC:\\Java> dir\r\n\r\n12/09/96  12:20a        <DIR>          .
  \   \r\n12/09/96  12:17a        <DIR>          ..  \r\n12/09/96  12:18a                   946
  1.au\r\n12/09/96  12:18a                 1,039 2.au\r\n12/09/96  12:18a                   993
  3.au\r\n12/09/96  12:19a                48,072 spacemusic.au\r\n12/09/96  12:19a
  \                  527 at_work.gif\r\n12/09/96  12:19a                12,818 monkey.jpg\r\n12/09/96
  \ 12:19a                16,242 Animator.class\r\n12/09/96  12:20a                 3,368
  Wave.class\r\n              10 File(s)        91,118 bytes\r\n\r\nC:\\Java> jar
  cvf bundle.jar *\r\n\r\nadding manifest\r\nadding: 1.au\r\nadding: 2.au\r\nadding:
  3.au\r\nadding: Animator.class\r\nadding: Wave.class\r\nadding: at_work.gif\r\nadding:
  monkey.jpg\r\nadding: spacemusic.au\r\n\r\nIf you already have separate subdirectories
  for images, audio files and classes, you can combine them into a single jar file:\r\nC:\\Java>
  dir\r\n\r\n12/09/96  12:11a        <DIR>          .\r\n12/09/96  12:17a        <DIR>
  \         ..\r\n12/03/96  06:54p        <DIR>          audio\r\n12/06/96  02:02p
  \       <DIR>          images\r\n12/09/96  12:10a        <DIR>          classes\r\n
  \              5 File(s)        207,360 bytes\r\n\r\nC:\\Java> jar cvf bundle.jar
  audio classes images\r\nadding: audio/1.au\r\nadding: audio/2.au\r\nadding: audio/3.au\r\nadding:
  audio/spacemusic.au\r\nadding: classes/Animator.class\r\nadding: classes/Wave.class\r\nadding:
  images/monkey.jpg\r\nadding: images/at_work.gif\r\n\r\nC:\\Java> dir \r\n12/09/96
  \ 12:11a        <DIR>          .\r\n12/09/96  12:17a        <DIR>          ..\r\n12/09/96
  \ 12:11a               207,360 bundle.jar\r\n12/03/96  06:54p        <DIR>          audio\r\n12/06/96
  \ 02:02p        <DIR>          images\r\n12/09/96  12:10a        <DIR>          classes\r\n
  \              6 File(s)        207,360 bytes\r\nTo see the entry names in the jarfile,
  use the \"t\" option:\r\nC:\\Java> jar tf bundle.jar\r\nMETA-INF/\r\nMETA-INF/MANIFEST.MF\r\naudio/1.au\r\naudio/2.au\r\naudio/3.au\r\naudio/spacemusic.au\r\nclasses/Animator.class\r\nclasses/Wave.class\r\nimages/monkey.jpg\r\nimages/at_work.gif\r\n\r\nTo
  add an index file to the jar file for speeding up class loading, use the \"i\" option.\r\n\r\nLet's
  say you split the inter-dependent classes for a stock trade application, into three
  jar files: main.jar, buy.jar, and sell.jar. If you specify the Class-path attribute
  in the main.jar manifest as:\r\n\r\n\tClass-Path: buy.jar sell.jar\r\n\r\nthen you
  can use the i option to speed up your application's class loading time:\r\n\r\n\tC:\\Java>
  jar i main.jar\r\n\r\nAn INDEX.LIST file is inserted to the META-INF directory which
  will enable the application class loader to download the specified jar files when
  it is searching for classes or resources."
