---
deprec2: ! "This is a copy of Chris Turners deprec2 howto (found here http://crackthenut.cracklabs.com/deprec2-your-slice/).
  \ I'm adding it here because his site is down at the moment and I almost cried myself
  to sleep at the thought of losing it (thank you google cache)\r\n\r\n------------------------------\r\n\r\nThis
  is a summary of how we build our servers and deploy our Rails apps from Ubuntu with
  the the current pre-release version of deprec2 + capistrano2.\r\n\r\nWe use Slicehost
  to host our Rails apps (highly recommended) and we use deprec + capistrano to build
  our slices and deploy our apps. Mike Bailey has been hard at work on deprec2, which
  builds on capistrano2 by Jamis Buck. Thank you to Mike and Jamis for making these
  great tools that make life easier.\r\n\r\nThe machine I was deploying from here
  (my “development” machine) is an Ubuntu Dapper slice with Ruby 1.8.6 and rubygems
  1.0.1.\r\n\r\nThe target machine here was a Slicehost slice with Ubuntu Gutsy.\r\n\r\nThis
  will build the slice with Ruby 1.8.6 and latest rails (2.0.2 as of this writing)
  For serving up your app it installs mongrel+nginx (not apache - though it can easily
  be modified to use it)\r\n\r\nWe use another remote machine to hold our source repositories
  and access those via the svn+ssh protocol. That is reflected in these instructions.\r\n\r\nStep
  1 gets your development machine set up properly and is a one-time deal. You won’t
  have to repeat it for each new slice you build/deploy to.\r\n\r\nStep 2 installs
  everything you’ll need on your slice and deploys your app\r\n\r\nI wanted to get
  this posted sooner rather than later - it may be a bit terse - let me know if anything
  is confusing or inaccurate. I’ll TRY to keep these instruction updated as deprec2
  moves into full release and other things change.\r\nStep 1 - Set Up The Machine
  You Are Deploying From (running Ubuntu in this case)\r\n\r\nThis will make sure
  your development machine is set up the right way so that building your slice goes
  smoothly. You won’t have to repeat this when you build/deploy to future slices.\r\n1.1.
  Download the pre-release deprec2 gem\r\n\r\nDeprec 2.0 isn’t quite released yet,
  but there is a pre-release gem available.\r\nAs of this writing it is at version
  1.99-13. You can find it at deprec.org.\r\n\r\nThe URL is almost guaranteed to change,
  but I’ve been grabbing the gem by:\r\n\r\nwget http://www.deprec.org/attachment/wiki/WikiStart/deprec-1.99.13.gem?format=raw
  -O deprec-1.99.13.gem\r\n\r\n1.2. Install Deprec\r\n\r\nsudo gem install deprec-1.99.13.gem\r\n\r\nMake
  sure you run this command from the same directory where you downloaded the deprec
  gem to.\r\nThis will also install the latest version of capistrano, should you not
  already have it.\r\n1.3. Install fastthread\r\n\r\nsudo gem install fastthread\r\n\r\nFastthread
  is necessary if you are using Ruby 1.8.6 to avoid possible deadlocks when using
  capistrano (or so I hear)\r\n1.4. Generate keys\r\n\r\nssh-keygen -t rsa\r\n\r\nAccept
  the default name/location.\r\n\r\nEnter a passphrase if you wish.\r\n\r\nOn my machine
  this creates my keys in /home/username/.ssh\r\n1.5. Setup a directory we can use
  for holding slice config files\r\n\r\nThis directory is not specific to any one
  rails project and once we set it up we can use\r\nit in the future to do some of
  the initial setup for other slices we may build.\r\n\r\nFrom within /home/username:\r\n\r\nmkdir
  -p config_slices/config\r\n\r\n1.6. Create some files for Deprec/Capistrano\r\n\r\nChange
  to your config_slices directory and:\r\n\r\ndepify .\r\n\r\nThis creates:\r\n~/.caprc\r\n~/config_slices/Capfile\r\n~/config_slices/config/deploy.rb\r\n\r\n1.7.
  Edit your .caprc\r\n\r\nOpen up ~/.caprc with a text editor\r\n\r\nUncomment and
  update this line to point at the appropriate directory\r\n\r\nssh_options[:keys]
  = %w(/path/to/your_home_dir/.ssh/id_rsa)\r\n\r\nlike this on my machine:\r\n\r\nssh_options[:keys]
  = %w(/home/username/.ssh/id_rsa)\r\n\r\nand uncomment these lines:\r\n\r\nssh_options[:forward_agent]
  = ...\r\nssh_options[:paranoid] = ...\r\n\r\n1.8. Generate some config files locally
  that will be pushed out to your slice in a future step\r\n\r\nMake sure you are
  still in config_slices directory\r\n\r\ncap deprec:ssh:config_gen\r\n\r\nThis step
  generates configuration files which will be used to configure the ssh client and
  server on the slice.\r\nIt also makes a directory to hold public keys for you and
  other users so deprec can find your keys and copy those out to the slice for you.\r\n1.9.
  (optional) Make some changes to the sshd_config before you send it to the slice\r\n\r\nThis
  step changes a couple settings in the the file that will be used to configure the
  slice’s ssh server.\r\nIt will be more secure if you don’t make either of these
  changes, but there is a chance you might find them to be useful.\r\n\r\nEdit ~/config_slices/config/ssh/etc/ssh/sshd_config\r\n\r\nIf
  you still want to be able to ssh into your slice with a password (not only keys),
  change the line from\r\n\r\nPasswordAuthentication no\r\n\r\nto\r\n\r\nPasswordAuthentication
  yes\r\n\r\nIf you still want to be able to ssh into your slice as root, change the
  line from\r\n\r\nPermitRootLogin no\r\n\r\nto\r\n\r\nPermitRootLogin yes\r\n\r\n1.10.
  Make some changes to the ssh_config before you send it to the slice\r\n\r\nThis
  step changes a couple settings in the the file that will be used to configure the
  slice’s ssh client.\r\nThis prevents the slice from getting a host key error when
  it uses ssh to check out your code from the svn repo.\r\n\r\nEdit ~/config_slices/config/ssh/etc/ssh/ssh_config\r\n\r\nChange:\r\n\r\n#StrictHostKeyChecking
  ask\r\n\r\nto\r\n\r\nStrictHostKeyChecking no\r\n\r\n1.11. Copy your public key
  to a place where deprec can find it\r\n\r\ncp ~/.ssh/id_rsa.pub ~/config_slices/config/ssh/authorized_keys/deploy_user\r\n\r\nNote:
  this copies and renames the file from id_rsa.pub to deploy_user\r\n\r\nYou can put
  whatever you want for deploy_user - this will be the username we create on the slice
  later. I just use my last name. deprec makes it easy to add/manage additional users
  on the slice in the future - no need to have a single, dedicated “deploy” user.\r\n1.12.
  Copy your public key out to your svn machine\r\n\r\nPUT SOMETHING HERE\r\n\r\nStep
  2 - Set up your slice and deploy your app\r\n\r\nNow that our development machine
  is set up we can move on to dealing with our slice.\r\n2.1. Create a new slice or
  rebuild one from SliceManager\r\n\r\nNote your slice’s IP address and new root password.\r\n2.2.
  Change the root password on the slice\r\n\r\nFrom within config_slices directory:\r\n\r\ncap
  deprec:users:passwd USER=root HOSTS=your.slice.ip.address\r\n\r\n   1. You will
  be prompted for which user to change the password for - default is root, which is
  what we want - so just hit enter\r\n   2. You will be prompted for root’s new password
  - type one in\r\n   3. You will be prompted for the slice’s current root password
  - enter the password slicehost emailed you\r\n\r\nYour slice’s root password has
  been changed.\r\n2.3. Create a new user on the slice to do your deployment with\r\n\r\nFrom
  within config_slices directory:\r\n\r\ncap deprec:users:add USER=root HOSTS=your.slice.ip.address\r\n\r\n
  \  1. You will be prompted for a new username - enter whatever you used for deploy_user
  in step 1.11\r\n   2. You will be asked if this should be an admin account -> enter
  yes\r\n   3. It should tell you it has found the key you copied above (if not you
  named the key wrong or did not copy it to the correct place in 1.11) and ask if
  you want to copy it out to the slice - default is yes - so hit enter\r\n   4. You
  will be prompted for a new password for deploy_user -> enter one\r\n   5. You will
  be prompted for a password - enter your slice’s new root password from previous
  step\r\n\r\nYour deploy_user has now been created on the slice and that users public
  key has been copied over.\r\n2.4. (optional) Make sure your keys work and some stuff
  about ssh-agent\r\n\r\nAt this point your user has been created on the slice and
  you should be able to ssh into the\r\nslice from your development machine.\r\n\r\nIf
  you want to make sure your keys are working properly:\r\n\r\nPLACEHOLDER:\r\n\r\n-test
  ssh into your slice with no password\r\n\r\n-instruction for running ssh-agent to
  eliminate passphrases and make sure key can get forwarded to svn if applicable\r\n\r\n-also
  test you can also ssh into your svn (if you use svn+ssh) - if not then add public
  key to authorized_keys on svn machine\r\n2.5. Copy the ssh/sshd configs over to
  the slice\r\n\r\nFrom within config_slices directory:\r\n\r\ncap deprec:ssh:config
  USER=deploy_user HOSTS=my.slice.ip.address\r\n\r\nThis configures the ssh client
  and server on the slice according to the config files we generated/edited in Step
  1.\r\n2.6. Setup your deploy.rb\r\n\r\ncd my_rails_project\r\ndepify .\r\n\r\nEdit
  my_rails_project/config/deploy.rb:\r\n\r\nIf you do not keep database.yml under
  source control add this line at the top (after require ‘deprec’):\r\n\r\nset :database_yml_in_scm,
  false\r\n\r\nThis will make sure that database.yml is symlinked from the shared/config
  dir (we’ll create that file later)\r\nIf you keep database.yml in source control
  you should not put this line in.\r\n\r\nNow change the following lines to match
  your specifics:\r\n\r\nset :user, \"deploy_user\"\r\nset :application, \"my_rails_project\"\r\nset
  :repository,  \"svn+ssh://my_svn_useruser@my_svn/path_to/my_rails_project/trunk\"
  \ #or whatever\r\nset :domain, \"my.slice.ip.address\" #or domain name if you have
  that setup\r\nrole :app, domain\r\nrole :web, domain\r\nrole :db,  domain, :primary
  => true\r\n\r\n2.7. Install ruby/rails/mysql/mongrel/nginx and everything else you
  need on the slice\r\n\r\nFrom within my_rails_project directory:\r\n\r\ncap deprec:rails:install_rails_stack\r\n\r\nAnd
  you thought that would be hard…\r\nThis step saves you a LOT of work (thank you
  Mike Bailey)\r\nIt takes a little while, ~10 min when I ran it.\r\n2.8. Run the
  initial deploy to get things configured\r\n\r\nFrom within my_rails_project directory:\r\n\r\ncap
  deploy:setup\r\ncap deploy\r\n\r\nThis sets up your application on the slice and
  does an initial check out from your svn.\r\n2.9. Create database.yml on the slice
  if you don’t keep it in source control\r\n\r\nSkip this step if database.yml is
  under source control.\r\n\r\nAdd the following to my_rails_project/config/deploy.rb
  inside the namespace:deploy block\r\n\r\ndb_params = {\r\n  \"adapter\"=>\"mysql\",\r\n
  \ \"database\"=>\"#{application}_#{rails_env}\",\r\n  \"username\"=>\"root\",\r\n
  \ \"password\"=>\"\",\r\n  \"host\"=>\"localhost\",\r\n  \"socket\"=>\"\"\r\n}\r\n\r\ndb_params.each
  do |param, default_val|\r\n  set \"db_#{param}\".to_sym,\r\n    lambda { Capistrano::CLI.ui.ask
  \"Enter database #{param}\" do |q| q.default=default_val end}\r\nend\r\n\r\ntask
  :my_generate_database_yml, :roles => :app do\r\n  database_configuration = \"#{rails_env}:\\n\"\r\n
  \ db_params.each do |param, default_val|\r\n    val=self.send(\"db_#{param}\")\r\n
  \   database_configuration<<\"  #{param}: #{val}\\n\"\r\n  end\r\n  run \"mkdir
  -p #{deploy_to}/#{shared_dir}/config\"\r\n  put database_configuration, \"#{deploy_to}/#{shared_dir}/config/database.yml\"\r\nend\r\n\r\nNow
  run this task to create database.yml\r\n\r\ncap deploy:my_generate_database_yml\r\n\r\nFollow
  the prompts - this makes database.yml - the defaults are likely ok (just hit enter)
  at all of the prompts.\r\n\r\n2.10. Create the database and apply migrations\r\n\r\nStill
  from within my_rails_project directory:\r\n\r\ncap deprec:db:create\r\ncap deprec:db:migrate\r\n\r\nThis
  creates your database and applies your migrations.\r\n\r\n2.11. Restart mongrel+nginx\r\n\r\nStill
  from within my_rails_project directory:\r\n\r\ncap deprec:mongrel:restart\r\ncap
  deprec:nginx:restart\r\n\r\nNow you should be able to point your browser at your
  slice and see your app running. Congrats!"
