---
bash_scripting: ! "-z \"string\"   \t String has zero length\n-n \"string\" \tString
  has non-zero length\n\nNote\n\nTo check whether a variable is set and not blank,
  use -n \"${BLAH}\" rather than -n $BLAH. The latter will cause problems in some
  situations if the variable is unset. \n\nInteger Comparison in bash\n\nThe general
  form of integer comparisons is int1 -operator int2. The following are available:\nOperator
  \tPurpose\n-eq \tInteger equality\n-ne \tInteger inequality\n-lt \tInteger less
  than\n-le \tInteger less than or equal to\n-gt \tInteger greater than\n-ge \tInteger
  greater than or equal to\nFile Tests in bash\n\nThe general form of a file test
  is -operator \"filename\". The following are available (lifted from man bash):\nOperator
  \tPurpose\n-a file \tExists (use -e instead)\n-b file \tExists and is a block special
  file\n-c file \tExists and is a character special file\n-d file \tExists and is
  a directory\n-e file \tExists\n-f file \tExists and is a regular file\n-g file \tExists
  and is set-group-id\n-h file \tExists and is a symbolic link\n-k file \tExists and
  its sticky bit is set\n-p file \tExists and is a named pipe (FIFO)\n-r file \tExists
  and is readable\n-s file \tExists and has a size greater than zero\n-t fd \t        Descriptor
  fd is open and refers to a terminal\n-u file \tExists and its set-user-id bit is
  set\n-w file \tExists and is writable\n-x file \tExists and is executable\n-O file
  \tExists and is owned by the effective user id\n-G file \tExists and is owned by
  the effective group id\n-L file \tExists and is a symbolic link\n-S file \tExists
  and is a socket\n-N file \tExists and has been modified since it was last read\nFile
  Comparison in bash\n\nThe general form of a file comparison is \"file1\" -operator
  \"file2\". The following are available (lifted from man bash):\nOperator \tPurpose\nfile1
  -nt file2 \tfile1 is newer (according to modification date) than file2, or if file1
  exists and file2 does not.\nfile1 -ot file2 \tfile1 is older than file2, or if file2
  exists and file1 does not.\nfile1 -ef file2 \tfile1 and file2 refer to the same
  device and inode numbers.\nBoolean Algebra in bash\n\nThere are constructs available
  for boolean algebra ('and', 'or' and 'not'). These are used outside of the [[ ]]
  blocks. For operator precedence, use ( ).\nConstruct \tEffect\nfirst || second \tfirst
  or second (short circuit)\nfirst && second \tfirst and second (short circuit)\n!
  condition \tnot condition\n\nNote\n\nThese will also sometimes work inside [[ ]]
  constructs, and using ! before a test is fairly common. [[ ! -foo ]] && bar is fine.
  However, there are catches -- [[ -f foo && bar ]] will not work properly, since
  commands cannot be run inside [[ ]] blocks.\n\nInside [ ] blocks, several -test
  style boolean operators are available. These should be avoided in favour of [[ ]]
  and the above operators.\n\nTo download files that have zero-padded filenames (bob002.jpg
  etc. in this example):\n\nfor i in `seq -f \"%03g\" 1 100`; do wget http://www.example.com/bob$i.jpg;
  done\n\nChange the seq formatting options for more or less padding.\n\nArrays in
  bash:\n\nzombies=(bob tom)\nzombies[10]='helen'\n \necho 'zombie 0 is' ${zombies[0]}\n#zombie
  0 is bob\n \nfor name in ${zombies[@]}\ndo\n  echo $name 'is a zombie'\ndone\n#bob
  is a zombie\n#tom is a zombie\n#helen is a zombie\n \nfor (( i=0; i < ${#zombies[@]};
  i++ ))\ndo\n  echo 'zombie' $i 'is' ${zombies[$i]}\ndone\n#zombie 0 is bob\n#zombie
  1 is tom\n#zombie 3 is"
