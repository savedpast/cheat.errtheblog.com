---
unicode: ! "How to printf a Chinese char to Linux command line ( terminal ) ?\n1.
  Check terminal encoding ( mostly UTF-8 )\n2. Check Source codes file encoding (
  in vim, :set encoding , mostly UTF-8 )\n3. In c++ source file, literal chinese is
  encoded with source code encoding\nand compiled to bytes into your binary. \nSo
  this works : printf(\"%s\\n\", (const char*) _chinese_bytes_buffer_ );\n\nIn Qt3,
  QString has a method called utf8(), this returns a QCString that can\nbe directly
  casted to raw bytes with (const char*) opeartor.\n\nThese raw bytes will be utf8
  encoding, and will be interpreted and displayed\ncorrectly on a Linux console that
  has UTF-8 encoding.\n\nOf course you need the Chinese font to display Chinese codepoints.\n\n========\nTo
  make your script cope with different character sets, you can set the $KCODE global
  (or specify the -K option to the interpreter):\n\n$KCODE='UTF8'\n\nWas originally
  introduced to signal the Ruby interpreter to go into a certain encoding mode. It's
  currently (mis)used by several libraries to set the global encoding of text (ie.
  jcode and activesupport)\n\nValues supported in Ruby1.8 appear to be:\nEUC ('-e',
  'e')\nSJIS ('-s', 's')\nUTF8 ('-u', 'u')\nNONE ('-n', 'n')\n\nWhen manipulating
  strings, include the 'jcode' library:\n\nrequire 'jcode'\n\nThis will extend the
  string class to behave in a multi-byte fashion when appropriate, as well as introducing:\n\n\"fish\".mbchar?
  # Returns the index of the first multibyte character in the string, or nil\n\"cat\".jlength
  \ # The length, in characters rather than bytes, of the string\n\nYou can get even
  more Unicode support by using ActiveSupport.\n\nrequire 'rubygems' rescue LoadError\nrequire
  'active_support'\n\n$KCODE='UTF8'\n\"Caf√©\".chars.upcase"
