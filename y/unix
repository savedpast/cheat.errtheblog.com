---
unix: ! "One of Unix's most useful features is its large number of text/data manipulations
  programs. Some of the more propular include:\r\n\r\n= FILE MANUPULATION\r\n\r\n*
  mkdir - make directory\r\n  mkdir -p /dir/new/dirs/even/if/not/existing\r\n* ln
  - symbolic links\r\n  ln -s ../source/file dest/file      # symbolic link named
  dest/file to dest/../source/file\r\n  ln -s ../source/file dest/          # same,
  since name is assumed\r\n* sudo - run a command as root\r\n* cd, pushd - change
  directories\r\n* ps - list running processes\r\n* touch - modify updated time of
  a file (creating if doesn't exist)\r\n* rm - remove file\r\n* df - disk space free\r\n*
  du - disk space usage\r\n\r\n= ARCHIVE FILES\r\n\r\n* tar - archive many files\r\n
  \ tar xvzf file.tar.gz  # extracts\r\n  tar xvjf file.tar.bz2 # extracts\r\n  tar
  cvjf file.tar.bz2 file1 file2 file3\r\n* zip, unzip, arj, rar, compress - more formats\r\n\r\n=
  WORKING ON MANY FILES\r\n\r\n* find\r\n  find . -iname *.foo -type f -print -exec
  command {} \\\\; # executes command on each *.foo file below given directory\r\n*
  xargs\r\n  find . -iname *.foo -type f -print0 | xargs -0 command # run command
  on each *.foo file.  (Those are zeros, not oh's.)\r\n* for x in y ; do ... ; done\r\n
  \ for foo in *4?.* ; do echo $foo ; done\r\n\r\n= LEARN MORE, LEARN WHERE\r\n\r\n*
  man - manual page for a command\r\n* info - man, but different\r\n* help - learn
  about a shell internal function\r\n* apropos - search for word across man pages\r\n*
  which - show path to an executable\r\n* locate - show path for any file whose **name**
  contains substring\r\n* basename, dirname - get the file part / directory part of
  a pathname\r\n\r\n= PROCESSING TEXT FILES\r\n\r\n* cat - concatenate and display
  files\r\n* less - output contents of a file interactively\r\n* echo, printf - print
  a given string\r\n* sort - sort and collate lines\r\n* uniq - remove or report adjacent
  duplicate lines\r\n* diff - display line-by-line differences between pairs of text
  files\r\n  diff -ruwqN /dir/tree/old /dir/tree/new # all files that differ\r\n*
  patch - apply differences between two files\r\n  diff -ruwq  /dir/tree/old /dir/tree/new
  > patch # create patch\r\n* grep, egrep, fgrep - search a file for a string or regular
  expression\r\n* tail, head\r\n  tail -n 50 file.txt  # last 50 lines\r\n  head -50
  \  file.txt  # first 50 lines\r\n* hexdump - show binary contents\r\n* strings -
  show any contained ASCII (non-binary) sequences\r\n* file - guess the type of a
  file\r\n\r\n= COLUMN-ORIENTED UTILITIES\r\n\r\n* cut - remove selected fields from
  each line of a file\r\n* paste - join corresponding lines of several files, or subsequent
  lines of one file\r\n* nl - line number\r\n* colrm - remove characters from specified
  columns within each line\r\n* expand, unexpand - expand TAB characters to SPACE
  characters, and vice versa\r\n* wc - word (line, letter) count\r\n  wc file1 file2
  dir/*\r\n\r\n= OBSOLETE\r\n\r\nWhile sed, awk and tr are still used, and still useful,
  any of perl, ruby or python from the command line present a more powerful and integrated
  interface\r\n \r\n* awk - pattern scanning and processing language\r\n* sed - stream
  editor\r\n* tr - translate characters\r\n\r\nh2. Other\r\n\r\n* wget - fetch a URL
  and store locally\r\n  wget http://website.com/path/file.html\r\n  wget -x http://website.com/path/file.html
  # saves to path 'website.com/path/file.html'\r\n  wget -r -l5 -nc -np [url] # rip
  recursively, 5 levels, don't reget, don't ascend in url."
