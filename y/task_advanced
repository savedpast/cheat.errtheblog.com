---
task_advanced: ! "task Advanced Usage\n[http://taskwarrior.org task] \n\nHere are
  the other commands, in some detail.\n\n % task\n\nWith no arguments, this command
  will generate a help message that lists all these commands.\n\nHowever, if the following
  configuration variable is specified:\n\n-------\n\ndefault.command=list pri:H\n\n-------\n\nThen
  this command will be run whenever task is run without arguments. This\nmeans that
  your most common task command can be run simply with the command:\n\n-------\n\n%
  task\n[task list project:foo]\n\nID Project Pri Description\n 1 foo     H   Design
  the thing\n 2 foo         Build the thing\n\n-------\n\n % task projects\n\nThis
  report generates a list of all the different projects that you are using\nalong
  with a count of the pending tasks for each project. For example:\n\n-------\n\n%
  task projects\n\nProject   Tasks\nErrands       1\nBirthdays     3\nCar           2\n\n-------\n\n
  % task summary\n\nThis report lists all the projects and a summary of their task
  status.\n\n-------\n\n% task summary\n\nProject  Remaining Avg age Complete 0%                        100%\nErrands
  \         1  3 days      50% XXXXXXXXXXXXXXXX\nBirthdays        3  7 mths       0%\nCar
  \             2   2 wks      25% XXXXXXXXX\n\n-------\n\nThis shows the project,
  the remaining tasks, the average age of each task, the\npercentage completed (remaining
  vs total) and a bar indicating that\npercentage.\n\n % task <id> append ...\n\nAppends
  the additional description to an existing task.\n\n % task annotate <id> additional
  note...\n\nAllows an annotation to be attached to an existing task. Each annotation
  has a\ntime stamp, and when displayed, the annotations are shown under the task\ndescription.
  For example:\n\n-------\n\n% task add Go to the supermarket\n% task annotate 1 need
  milk\n% task ls\n\nID Project Pri Due Active Age     Description\n 1                                Go
  to the supermarket\n                                  3/23/2009 need milk\n-------\n\nThe
  date of the annotation uses the \"dateformat\" configuration variable.\n\n % task
  duplicate 1 /foo/bar/g +tag priority:H\n\nThis duplicates task 1, then applies the
  modifications specified, which change\nall \"foo\" to \"bar\" in the description
  and annotations, adds the tag \"tag\", and\nsets the priority to \"H\".\n\n % task
  delete <id>\n\nThere are two ways of getting rid of tasks - mark them as done, or
  delete them.\n\n % task undelete <id>\n\nIf a task was inadvertently deleted, it
  may be undeleted, provided that no\nreports have been run since the deletion. Ideally,
  the undelete command is run\nimmediately after the erroneous delete command.\n\nIf
  a report is run (such as \"task list\"), then task performs a garbage\ncollection
  that removes deleted tasks, and the task cannot be undeleted.\n\n % task done <id>\n\nThis
  is how a task is marked as done.\n\n % task undo <id>\n\nIf a task was recently
  marked as done, and no report has been run, it may be\npossible to cancel the completed
  status of the task as though \"task done ...\"\nwas never run.\n\n % task list ...\n\nThe
  list report will show the active status, and age of the task in addition\nto the
  columns that \"task ls\" shows. It is just a more detailed list.\n\n % task long
  ...\n\nThe long report will show the entry date and start date of a task, in addition\nto
  the columns that the \"task list\" shows.\n\n % task start <id>\n\nThis marks a
  task as started (and therefore active), which is shown in the\n\"list\" report:\n\n-------\n\n%
  task list\n\nID Project Pri Due Active Age     Description\n12 Errand  L                      Remember
  to deposit check\n...\n\n% task start 12\n% task list\n\nID Project Pri Due Active
  Age     Description\n12 Errand  L       *      3 days  Remember to deposit check\n...\n\n-------\n\n
  % task active\n\nShows all active tasks, that is, the tasks for which the \"task
  start ...\"\ncommand was run, as shown above.\n\n % task stop <id>\n\nMarks a task
  as inactive, by removing the start time.\n\n % task overdue\n\nSimply lists all
  the task that have a due date that is past, in \"list\" format.\n\n % task history\n\nThis
  report shows you an overview of how many tasks were added, completed and\ndeleted,
  by month. It looks like this:\n\n-------\n\n% task history\n\nYear Month     Added
  Completed Deleted Net\n2008 March        21        16       0   5\n     April        13
  \       11       1   1\n     May           8        14       3  -9\n\n-------\n\nThis
  shows that for the three months that task has been used, March and April\nsaw the
  total number of tasks increase, but in May the number decreased as\nmore task were
  completed than added.\n\n % task ghistory\n\nThe ghistory report is a \"graphical\"
  version of the history report. It shows a\ncolored bar graph and legend.\n\n % task
  timesheet 2\n\nThe timesheet report shows a list of tasks completed and started
  during a\none-week period. In the example above, 2 weeks of tasks are shown.\n\nBy
  default, the report starts on a Monday. To override this value, add an\nentry to
  your .taskrc file like this:\n\n-------\n\nweekstart=Sunday\n\n-------\n\n % task
  calendar\n\nThis report shows a calendar of the current month, with any task due
  or\noverdue dates marked on it. Color is used to mark these dates.\n\n-------\n\n
  % task calendar\n\n      May 2008\n\nSu Mo Tu We Th Fr Sa\n             1  2  3\n
  4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29
  30 31\n\n-------\n\n % task next\n\nThis report shows you the tasks you should probable
  work on next. Task will\nscan all the tasks and will pick two task from each project
  to report. Those\ntwo tasks will be chosen in order of overdue, due soon, High,
  Medium or Low\npriority. Essentially task chooses the two most important task for
  each\nproject and displays them ordered in the usual way.\n\nIf you wish to show
  a different number of tasks per project, modify the entry\nin .taskrc:\n\n-------\n\nnext=2\n\n-------\n\nTo
  be your preferred number.\n\n % task <id> ...\n\nWhen a task id is specified, everything
  applies to just that task. Suppose we\nneeded to correct a task:\n\n-------\n\n%
  task ls\n\nID Project Pri Description\n12 Errand  L   Remember to deposit chekc\n...\n\n%
  task 12 Remember to deposit bonus check\n% task ls\n\nID Project Pri Description\n12
  Errand  L   Remember to deposit bonus check\n...\n\n-------\n\n % task oldest [limit]\n\nLists
  the oldest tasks. The number of tasks shown is set by the configuration\nvariable:\n\n-------\n\nreport.oldest.limit=10\n\n-------\n\n\nThis
  value can be overridden at run time by specifying the number of tasks on\nthe command
  line:\n\n\n-------\n\n% task oldest 5\n\n-------\n\n\n % task newest [limit]\n\nLists
  the newest tasks. The number of tasks shown is set by the configuration\nvariable:\n\n-------\n\nreport.newest.limit=10\n\n-------\n\nThis
  value can be overridden at run time by specifying the number of tasks on\nthe command
  line:\n\n-------\n\ntask newest 5\n\n-------\n\n % task <id> /from/to/\n\nIf a task
  has been entered with a typo, it can be easily corrected by this\ncommand. For example:\n\n-------\n\n%
  task ls\n\nID Project Pri Description\n12 Errand  L   Remember to deposit chekc\n...\n\n%
  task 12 /chekc/check/\n% task ls\n\nID Project Pri Description\n12 Errand  L   Remember
  to deposit check\n...\n\n-------\n\nThis command makes a single correction to the
  first occurrence of \"from\" in a\ntask description.\n\nIf a task is annotated,
  the annotation can also be modified using this\ncommand.\n\n % task <id> /from/to/g\n\nThe
  \"g\" modifier to the substitution command causes every occurrence of \"from\"\nto
  be replaced with \"to\", in both the description and any annotations.\n\n % task
  tags\n\nThis command will generate a list of all the tags that are currently in
  use by\ntask.\n\n % task info <id>\n\nThis command gives detailed information about
  a single task. It will tell you\nwhen the task was entered, when started, its status,
  tags, and more.\n\n % task stats\n\nThis command generates a list of statistics
  about your task usage, such as the\naverage time it takes to complete a task, how
  often new tasks are added, and\nmore.\n\n % task completed\n\nThis generates a list
  of all tasks that have been completed, sorted by their\ncompletion date.\n\n % task
  export <file name>\n\nThis instructs task to write out a CSV format dump of all
  tasks, both pending\nand completed, to the file specified. This is how you might
  view tasks in a\nspreadsheet.\n\n % task colors\n\nThis command displays all the
  colors that task supports.\n\n % task version\n\nThis can be used to show the version
  number of task, and to display all the\ncurrent configuration settings, as read
  from the .taskrc file.\n\n % task rc:<file> ...\n\nBy specifying rc:, it is possible
  to force task to use an alternate .taskrc\nfile. By default, task looks in your
  home directory, so these two commands are\nessentially identical:\n\n-------\n\n%
  task list task rc:~/.taskrc list\n\n-------\n\nWhat this override allows, is the
  possibility of keeping your task lists\ncompletely separate, say for work and home.
  This can be accomplished with the\nfollowing commands (valid for bash):\n\n-------\n\n%
  alias htask=\"task rc:/home/me/.taskrc_home\" alias wtask=\"task\n% rc:/home/me/.taskrc_work\"
  htask list\n...\n% wtask list\n...\n\n-------\n\n % task <id> \"new description\"\n\nNot
  strictly a command, the replacement of the description can be achieved by\nquoting
  the entire description. The quotes are necessary in case one of the\ndescription
  words looks like a task command.\n\n % task <id> edit\n\nThis command allows you
  to use your text editor to edit all aspects of a task.\nThe specified task will
  be written to a file, and your text editor will be\ninvoked. If you modify the task
  in the text editor, task will update\naccordingly.\n\nTask will first check to see
  if you have defined a text editor in the 'editor'\nconfiguration variable. If not,
  task will check to see if you defined a text\neditor in the VISUAL environment variable.
  If not task will check to see if\nyou defined a text editor in the EDITOR environment
  variable. If all those\nfail, task launches vi.\n\n % task <id> fg:... bg:...\n\nNot
  strictly a command, the setting of the fg and bg (foreground and\nbackground) attributes
  determines the colors used to represent the task. Valid\nforeground colors are:\n\n-------\n\n
  \        bold          underline          bold_underline\nblack    bold_black    underline_black
  \   bold_underline_black\nred      bold_red      underline_red      bold_underline_red\ngreen
  \   bold_green    underline_green    bold_underline_green\nyellow   bold_yellow
  \  underline_yellow   bold_underline_yellow\nblue     bold_blue     underline_blue
  \    bold_underline_blue\nmagenta  bold_magenta  underline_magenta  bold_underline_magenta\ncyan
  \    bold_cyan     underline_cyan     bold_underline_cyan\nwhite    bold_white    underline_white
  \   bold_underline_white\n\n-------\n\nNote that these are not just colors, but
  combinations of colors and\nattributes. Valid background colors are:\n\n-------\n\non_black
  \   on_bright_black\non_red      on_bright_red\non_green    on_bright_green\non_yellow
  \  on_bright_yellow\non_blue     on_bright_blue\non_magenta  on_bright_magenta\non_cyan
  \    on_bright_cyan\non_white    on_bright_white\n\n-------\n\nNote also that this
  capability does depend on whether your terminal program\ncan display these colors."
