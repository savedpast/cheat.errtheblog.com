---
spreadsheet: ! "Getting Started with Spreadsheet\r\n\r\nThis guide is meant to get
  you started using Spreadsheet. By the end of it, you should be able to read and
  write Spreadsheets.\r\nReading is easy!\r\n\r\nFirst, make sure all that code is
  loaded:\r\n\r\n  require 'spreadsheet'\r\n\r\nWorksheets come in various Encodings.
  You need to tell Spreadsheet which Encoding you want to deal with. The Default is
  UTF-8\r\n\r\n  Spreadsheet.client_encoding = 'UTF-8'\r\n\r\nLet‘s open a workbook:\r\n\r\n
  \ book = Spreadsheet.open '/path/to/an/excel-file.xls'\r\n\r\nWe can either access
  all the Worksheets in a Workbook…\r\n\r\n  book.worksheets\r\n\r\n…or access them
  by index or name (encoded in your client_encoding)\r\n\r\n  sheet1 = book.worksheet
  0\r\n  sheet2 = Book.worksheet 'Sheet1'\r\n\r\nNow you can either iterate over all
  rows that contain some data. A call to Worksheet.each without argument will omit
  empty rows at the beginning of the Worksheet:\r\n\r\n  sheet1.each do |row|\r\n
  \   # do something interesting with a row\r\n  end\r\n\r\nOr you can tell Worksheet
  how many rows should be omitted at the beginning. The following starts at the 3rd
  row, regardless of whether or not it or the preceding rows contain any data:\r\n\r\n
  \ sheet2.each 2 do |row|\r\n    # do something interesting with a row\r\n  end\r\n\r\nOr
  you can access rows directly, by their index (0-based):\r\n\r\n  row = sheet1.row(3)\r\n\r\nTo
  access the values stored in a Row, treat the Row like an Array.\r\n\r\n  row[0]\r\n\r\n->
  this will return a String, a Float, an Integer, a Formula, a Link or a Date or DateTime
  object - or nil if the cell is empty.\r\n\r\nMore information about the formatting
  of a cell can be found in the Format with the equivalent index\r\n\r\n  row.format
  2\r\n\r\nWriting is easy\r\n\r\nAs before, make sure you have Spreadsheet required
  and the client_encoding set. Then make a new Workbook:\r\n\r\n  book = Spreadsheet::Workbook.new\r\n\r\nAdd
  a Worksheet and you‘re good to go:\r\n\r\n  sheet1 = book.create_worksheet\r\n\r\nThis
  will create a Worksheet with the Name \"Worksheet1\". If you prefer another name,
  you may do either of the following:\r\n\r\n  sheet2 = book.create_worksheet :name
  => 'My Second Worksheet'\r\n  sheet1.name = 'My First Worksheet'\r\n\r\nNow, add
  data to the Worksheet, using either Worksheet#[]=, Worksheet#update_row, or work
  directly on Row using any of the Array-Methods that modify an Array in place:\r\n\r\n
  \ sheet1.row(0).concat %w{Name Country Acknowlegement}\r\n  sheet1[1,0] = 'Japan'\r\n
  \ row = sheet1.row(1)\r\n  row.push 'Creator of Ruby'\r\n  row.unshift 'Yukihiro
  Matsumoto'\r\n  sheet1.row(2).replace [ 'Daniel J. Berger', 'U.S.A.',\r\n                          'Author
  of original code for Spreadsheet::Excel' ]\r\n  sheet1.row(3).push 'Charles Lowe',
  'Author of the ruby-ole Library'\r\n  sheet1.row(3).insert 1, 'Unknown'\r\n  sheet1.update_row
  4, 'Hannes Wyss', 'Switzerland', 'Author'\r\n\r\nAdd some Formatting for flavour:\r\n\r\n
  \ sheet1.row(0).height = 18\r\n\r\n  format = Spreadsheet::Format.new :color =>
  :blue,\r\n                                   :weight => :bold,\r\n                                   :size
  => 18\r\n  sheet1.row(0).default_format = format\r\n\r\n  bold = Spreadsheet::Format.new
  :weight => :bold\r\n  4.times do |x| sheet1.row(x + 1).set_format(0, bold) end\r\n\r\nAnd
  finally, write the Excel File:\r\n\r\n  book.write '/path/to/output/excel-file.xls'\r\n\r\nModifying
  an existing Document\r\n\r\nSpreadsheet has some limited support for modifying an
  existing Document. This is done by copying verbatim those parts of an Excel-document
  which Spreadsheet can‘t modify (yet), recalculating relevant offsets, and writing
  the data that can be changed. Here‘s what should work:\r\n\r\n    Adding, changing
  and deleting cells.\r\n    You should be able to fill in Data to be evaluated by
  predefined Formulas\r\n\r\nLimitations:\r\n\r\n    Spreadsheet can only write BIFF8
  (Excel97 and higher). The results of modifying an earlier version of Excel are undefined.\r\n
  \   Spreadsheet does not modify Formatting at present. That means in particular
  that if you set the Value of a Cell to a Date, it can only be read as a Date if
  its Format was set correctly prior to the change.\r\n    Although it is theoretically
  possible, it is not recommended to write the resulting Document back to the same
  File/IO that it was read from.\r\n\r\nAnd here‘s how it works:\r\n\r\n  book = Spreadsheet.open
  '/path/to/an/excel-file.xls'\r\n  sheet = book.worksheet 0\r\n  sheet.each do |row|\r\n
  \   row[0] *= 2\r\n  end\r\n  book.write '/path/to/output/excel-file.xls'\r\n\r\nDate
  and DateTime\r\n\r\nExcel does not know a separate Datatype for Dates. Instead it
  encodes Dates into standard floating-point numbers and recognizes a Date-Cell by
  its formatting-string:\r\n\r\n  row.format(3).number_format\r\n\r\nWhenever a Cell‘s
  Format describes a Date or Time, Spreadsheet will give you the decoded Date or DateTime
  value. Should you need to access the underlying Float, you may do the following:\r\n\r\n
  \ row.at(3)\r\n\r\nIf for some reason the Date-recognition fails, you may force
  Date-decoding:\r\n\r\n  row.date(3)\r\n  row.datetime(3)\r\n\r\nWhen you set the
  value of a Cell to a Date, Time or DateTime, Spreadsheet will try to set the cell‘s
  number-format to a corresponding value (one of Excel‘s builtin formats). If you
  have already defined a Date- or DateTime-format, Spreadsheet will use that instead.
  If a format has already been applied to a particular Cell, Spreadsheet will leave
  it untouched:\r\n\r\n  row[4] = Date.new 1975, 8, 21\r\n  # -> assigns the builtin
  Date-Format: 'M/D/YY'\r\n  book.add_format Format.new(:number_format => 'DD.MM.YYYY
  hh:mm:ss')\r\n  row[5] = DateTime.new 2008, 10, 12, 11, 59\r\n  # -> assigns the
  added DateTime-Format: 'DD.MM.YYYY hh:mm:ss'\r\n  row.set_format 6, Format.new(:number_format
  => 'D-MMM-YYYY')\r\n  row[6] = Time.new 2008, 10, 12\r\n  # -> the Format of cell
  6 is left unchanged.\r\n\r\nOutline (Grouping) and Hiding\r\n\r\nSpreadsheet supports
  outline (grouping) and hiding functions from version 0.6.5. In order to hide rows
  or columns, you can use ‘hidden’ property. As for outline, ‘outline_level’ property
  is also available. You can use both ‘hidden’ and ‘outline_level’ at the same time.\r\n\r\nYou
  can create a new file with outline and hiding rows and columns as follows:\r\n\r\n
  \ require 'spreadsheet'\r\n\r\n  # create a new book and sheet\r\n  book = Spreadsheet::Workbook.new\r\n
  \ sheet = book.create_worksheet\r\n  5.times {|j| 5.times {|i| sheet[j,i] = (i+1)*10**j}}\r\n\r\n
  \ # column\r\n  sheet.column(2).hidden = true\r\n  sheet.column(3).hidden = true\r\n
  \ sheet.column(2).outline_level = 1\r\n  sheet.column(3).outline_level = 1\r\n\r\n
  \ # row\r\n  sheet.row(2).hidden = true\r\n  sheet.row(3).hidden = true\r\n  sheet.row(2).outline_level
  = 1\r\n  sheet.row(3).outline_level = 1\r\n\r\n  # save file\r\n  book.write 'out.xls'\r\n\r\nAlso
  you can read an existing file and change the hidden and outline properties. Here
  is the example below:\r\n\r\n  require 'spreadsheet'\r\n\r\n  # read an existing
  file\r\n  file = ARGV[0]\r\n  book = Spreadsheet.open(file, 'rb')\r\n  sheet= book.worksheet(0)\r\n\r\n
  \ # column\r\n  sheet.column(2).hidden = true\r\n  sheet.column(3).hidden = true\r\n
  \ sheet.column(2).outline_level = 1\r\n  sheet.column(3).outline_level = 1\r\n\r\n
  \ # row\r\n  sheet.row(2).hidden = true\r\n  sheet.row(3).hidden = true\r\n  sheet.row(2).outline_level
  = 1\r\n  sheet.row(3).outline_level = 1\r\n\r\n  # save file\r\n  book.write \"out.xls\"\r\n\r\nNotes\r\n\r\n
  \ * The outline_level should be under 8, which is due to the Excel data format.\r\n\r\nMore
  about Encodings\r\n\r\nSpreadsheet assumes it‘s running on Ruby 1.8 with Iconv-support.
  It is your responsibility to handle Conversion Errors, or to prevent them e.g. by
  using the Iconv Transliteration and Ignore flags: Spreadsheet.client_encoding =
  ‘LATIN1//TRANSLIT//IGNORE‘\r\nBackward Compatibility\r\n\r\nSpreadsheet is designed
  to be a drop-in replacement for both ParseExcel and Spreadsheet::Excel. It provides
  a number of require-paths for backward compatibility with its predecessors. If you
  have been working with ParseExcel, you have probably used one or more of the following:\r\n\r\n
  \ require 'parseexcel'\r\n  require 'parseexcel/parseexcel'\r\n  require 'parseexcel/parser'\r\n\r\nEither
  of the above will define the ParseExcel.parse method as a facade to Spreadsheet.open.
  Additionally, this will alter Spreadsheets behavior to define the ParseExcel::Worksheet::Cell
  class and fill each parsed Row with instances thereof, which in turn provide ParseExcel‘s
  Cell#to_s(encoding) and Cell#date methods. You will have to manually uninstall the
  parseexcel library.\r\n\r\nIf you are upgrading from Spreadsheet::Excel, you were
  probably using Workbook#add_worksheet and Worksheet#write, write_row or write_column.
  Use the following to load the code which provides them:\r\n\r\n  require 'spreadsheet/excel'\r\n\r\nAgain,
  you will have to manually uninstall the spreadsheet-excel library.\r\n\r\nIf you
  perform fancy formatting, you may run into trouble as the Format implementation
  has changed considerably. If that is the case, please drop me a line at hannes.wyss@gmail.com
  and I will try to help you. Don‘t forget to include the offending code-snippet!\r\n\r\nAll
  compatibility code is deprecated and will be removed in version 1.0.0\r\n"
