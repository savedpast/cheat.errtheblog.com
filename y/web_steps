---
web_steps: ! "# IMPORTANT: This file is generated by cucumber-rails - edit at your
  own peril.\r\n# It is recommended to regenerate this file in the future when you
  upgrade to a \r\n# newer version of cucumber-rails. Consider adding your own code
  to a new file \r\n# instead of editing this one. Cucumber will automatically load
  all features/**/*.rb\r\n# files.\r\n\r\n\r\nrequire 'uri'\r\nrequire File.expand_path(File.join(File.dirname(__FILE__),
  \"..\", \"support\", \"paths\"))\r\n\r\n# Commonly used webrat steps\r\n# http://github.com/brynary/webrat\r\n\r\nGiven
  /^(?:|I )am on (.+)$/ do |page_name|\r\n  visit path_to(page_name)\r\nend\r\n\r\nWhen
  /^(?:|I )go to (.+)$/ do |page_name|\r\n  visit path_to(page_name)\r\nend\r\n\r\nWhen
  /^(?:|I )press \"([^\\\"]*)\"$/ do |button|\r\n  click_button(button)\r\nend\r\n\r\nWhen
  /^(?:|I )follow \"([^\\\"]*)\"$/ do |link|\r\n  click_link(link)\r\nend\r\n\r\nWhen
  /^(?:|I )follow \"([^\\\"]*)\" within \"([^\\\"]*)\"$/ do |link, parent|\r\n  click_link_within(parent,
  link)\r\nend\r\n\r\nWhen /^(?:|I )fill in \"([^\\\"]*)\" with \"([^\\\"]*)\"$/ do
  |field, value|\r\n  fill_in(field, :with => value)\r\nend\r\n\r\nWhen /^(?:|I )fill
  in \"([^\\\"]*)\" for \"([^\\\"]*)\"$/ do |value, field|\r\n  fill_in(field, :with
  => value)\r\nend\r\n\r\n# Use this to fill in an entire form with data from a table.
  Example:\r\n#\r\n#   When I fill in the following:\r\n#     | Account Number | 5002
  \      |\r\n#     | Expiry date    | 2009-11-01 |\r\n#     | Note           | Nice
  guy   |\r\n#     | Wants Email?   |            |\r\n#\r\n# TODO: Add support for
  checkbox, select og option\r\n# based on naming conventions.\r\n#\r\nWhen /^(?:|I
  )fill in the following:$/ do |fields|\r\n  fields.rows_hash.each do |name, value|\r\n
  \   When %{I fill in \"#{name}\" with \"#{value}\"}\r\n  end\r\nend\r\n\r\nWhen
  /^(?:|I )select \"([^\\\"]*)\" from \"([^\\\"]*)\"$/ do |value, field|\r\n  select(value,
  :from => field)\r\nend\r\n\r\n# Use this step in conjunction with Rail's datetime_select
  helper. For example:\r\n# When I select \"December 25, 2008 10:00\" as the date
  and time\r\nWhen /^(?:|I )select \"([^\\\"]*)\" as the date and time$/ do |time|\r\n
  \ select_datetime(time)\r\nend\r\n\r\n# Use this step when using multiple datetime_select
  helpers on a page or\r\n# you want to specify which datetime to select. Given the
  following view:\r\n#   <%= f.label :preferred %><br />\r\n#   <%= f.datetime_select
  :preferred %>\r\n#   <%= f.label :alternative %><br />\r\n#   <%= f.datetime_select
  :alternative %>\r\n# The following steps would fill out the form:\r\n# When I select
  \"November 23, 2004 11:20\" as the \"Preferred\" date and time\r\n# And I select
  \"November 25, 2004 10:30\" as the \"Alternative\" date and time\r\nWhen /^(?:|I
  )select \"([^\\\"]*)\" as the \"([^\\\"]*)\" date and time$/ do |datetime, datetime_label|\r\n
  \ select_datetime(datetime, :from => datetime_label)\r\nend\r\n\r\n# Use this step
  in conjunction with Rail's time_select helper. For example:\r\n# When I select \"2:20PM\"
  as the time\r\n# Note: Rail's default time helper provides 24-hour time-- not 12
  hour time. Webrat\r\n# will convert the 2:20PM to 14:20 and then select it.\r\nWhen
  /^(?:|I )select \"([^\\\"]*)\" as the time$/ do |time|\r\n  select_time(time)\r\nend\r\n\r\n#
  Use this step when using multiple time_select helpers on a page or you want to\r\n#
  specify the name of the time on the form.  For example:\r\n# When I select \"7:30AM\"
  as the \"Gym\" time\r\nWhen /^(?:|I )select \"([^\\\"]*)\" as the \"([^\\\"]*)\"
  time$/ do |time, time_label|\r\n  select_time(time, :from => time_label)\r\nend\r\n\r\n#
  Use this step in conjunction with Rail's date_select helper.  For example:\r\n#
  When I select \"February 20, 1981\" as the date\r\nWhen /^(?:|I )select \"([^\\\"]*)\"
  as the date$/ do |date|\r\n  select_date(date)\r\nend\r\n\r\n# Use this step when
  using multiple date_select helpers on one page or\r\n# you want to specify the name
  of the date on the form. For example:\r\n# When I select \"April 26, 1982\" as the
  \"Date of Birth\" date\r\nWhen /^(?:|I )select \"([^\\\"]*)\" as the \"([^\\\"]*)\"
  date$/ do |date, date_label|\r\n  select_date(date, :from => date_label)\r\nend\r\n\r\nWhen
  /^(?:|I )check \"([^\\\"]*)\"$/ do |field|\r\n  check(field)\r\nend\r\n\r\nWhen
  /^(?:|I )uncheck \"([^\\\"]*)\"$/ do |field|\r\n  uncheck(field)\r\nend\r\n\r\nWhen
  /^(?:|I )choose \"([^\\\"]*)\"$/ do |field|\r\n  choose(field)\r\nend\r\n\r\n# Adds
  support for validates_attachment_content_type. Without the mime-type getting\r\n#
  passed to attach_file() you will get a \"Photo file is not one of the allowed file
  types.\"\r\n# error message \r\nWhen /^(?:|I )attach the file \"([^\\\"]*)\" to
  \"([^\\\"]*)\"$/ do |path, field|\r\n  type = path.split(\".\")[1]\r\n\r\n  case
  type\r\n  when \"jpg\"\r\n    type = \"image/jpg\" \r\n  when \"jpeg\"\r\n    type
  = \"image/jpeg\" \r\n  when \"png\"\r\n    type = \"image/png\" \r\n  when \"gif\"\r\n
  \   type = \"image/gif\"\r\n  end\r\n  \r\n  attach_file(field, path, type)\r\nend\r\n\r\nThen
  /^(?:|I )should see \"([^\\\"]*)\"$/ do |text|\r\n  if defined?(Spec::Rails::Matchers)\r\n
  \   response.should contain(text)\r\n  else\r\n    assert_contain text\r\n  end\r\nend\r\n\r\nThen
  /^(?:|I )should see \"([^\\\"]*)\" within \"([^\\\"]*)\"$/ do |text, selector|\r\n
  \ within(selector) do |content|\r\n    if defined?(Spec::Rails::Matchers)\r\n      content.should
  contain(text)\r\n    else\r\n      assert content.include?(text)\r\n    end\r\n
  \ end\r\nend\r\n\r\nThen /^(?:|I )should see \\/([^\\/]*)\\/$/ do |regexp|\r\n  regexp
  = Regexp.new(regexp)\r\n  if defined?(Spec::Rails::Matchers)\r\n    response.should
  contain(regexp)\r\n  else\r\n    assert_contain regexp\r\n  end\r\nend\r\n\r\nThen
  /^(?:|I )should see \\/([^\\/]*)\\/ within \"([^\\\"]*)\"$/ do |regexp, selector|\r\n
  \ within(selector) do |content|\r\n    regexp = Regexp.new(regexp)\r\n    if defined?(Spec::Rails::Matchers)\r\n
  \     content.should contain(regexp)\r\n    else\r\n      assert content =~ regexp\r\n
  \   end\r\n  end\r\nend\r\n\r\nThen /^(?:|I )should not see \"([^\\\"]*)\"$/ do
  |text|\r\n  if defined?(Spec::Rails::Matchers)\r\n    response.should_not contain(text)\r\n
  \ else\r\n    assert_not_contain text\r\n  end\r\nend\r\n\r\nThen /^(?:|I )should
  not see \"([^\\\"]*)\" within \"([^\\\"]*)\"$/ do |text, selector|\r\n  within(selector)
  do |content|\r\n    if defined?(Spec::Rails::Matchers)\r\n        content.should_not
  contain(text)\r\n    else\r\n        assert !content.include?(text)\r\n    end\r\n
  \ end\r\nend\r\n\r\nThen /^(?:|I )should not see \\/([^\\/]*)\\/$/ do |regexp|\r\n
  \ regexp = Regexp.new(regexp)\r\n  if defined?(Spec::Rails::Matchers)\r\n    response.should_not
  contain(regexp)\r\n  else\r\n    assert_not_contain regexp\r\n  end\r\nend\r\n\r\nThen
  /^(?:|I )should not see \\/([^\\/]*)\\/ within \"([^\\\"]*)\"$/ do |regexp, selector|\r\n
  \ within(selector) do |content|\r\n    regexp = Regexp.new(regexp)\r\n    if defined?(Spec::Rails::Matchers)\r\n
  \     content.should_not contain(regexp)\r\n    else\r\n      assert content !~
  regexp\r\n    end\r\n  end\r\nend\r\n\r\nThen /^the \"([^\\\"]*)\" field should
  contain \"([^\\\"]*)\"$/ do |field, value|\r\n  if defined?(Spec::Rails::Matchers)\r\n
  \   field_labeled(field).value.should =~ /#{value}/\r\n  else\r\n    assert_match(/#{value}/,
  field_labeled(field).value)\r\n  end\r\nend\r\n\r\nThen /^the \"([^\\\"]*)\" field
  should not contain \"([^\\\"]*)\"$/ do |field, value|\r\n  if defined?(Spec::Rails::Matchers)\r\n
  \   field_labeled(field).value.should_not =~ /#{value}/\r\n  else\r\n    assert_no_match(/#{value}/,
  field_labeled(field).value)\r\n  end\r\nend\r\n\r\nThen /^the \"([^\\\"]*)\" checkbox
  should be checked$/ do |label|\r\n  if defined?(Spec::Rails::Matchers)\r\n    field_labeled(label).should
  be_checked\r\n  else\r\n    assert field_labeled(label).checked?\r\n  end\r\nend\r\n\r\nThen
  /^the \"([^\\\"]*)\" checkbox should not be checked$/ do |label|\r\n  if defined?(Spec::Rails::Matchers)\r\n
  \   field_labeled(label).should_not be_checked\r\n  else\r\n    assert !field_labeled(label).checked?\r\n
  \ end\r\nend\r\n\r\nThen /^(?:|I )should be on (.+)$/ do |page_name|\r\n  current_path
  = URI.parse(current_url).select(:path, :query).compact.join('?')\r\n  if defined?(Spec::Rails::Matchers)\r\n
  \   current_path.should == path_to(page_name)\r\n  else\r\n    assert_equal path_to(page_name),
  current_path\r\n  end\r\nend\r\n\r\nThen /^show me the page$/ do\r\n  save_and_open_page\r\nend"
