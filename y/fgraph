---
fgraph: ! "= fgraph\n\n* http://github.com/jugend/fgraph\n\n== Description\n\nFacebook
  Graph Ruby API implementation with Ruby magic (http://graph.facebook.com).\n\n==
  Installation\n\n  sudo gem install fgraph\n    \n== Rails Plugin Installation\n\nGem
  Plugin installation:\n\n  sudo gem install fgraph\n\n  # Edit [RAILS_ROOT]/config/environment.rb\n
  \ config.gem 'fgraph', :version => \">=0.2.0\"\n  \n  # Edit [RAILS_ROOT]/Rakefile\n
  \ require 'tasks/fgraph'\n  \n  # Create fgraph.yml config in [RAILS_ROOT]/config\n
  \ rake fgraph:setup\n  \nNormal Plugin Installation:\n\n  script/plugin install
  http://github.com/jugend/fgraph.git\n  \n=== Facebook Graph Cheat Sheet\n\n  sudo
  gem install cheat\n  cheat fbgraph\n\n=== Single object query\n\n  # Users: https://graph.facebook.com/btaylor
  \ (Bret Taylor)\n  FGraph.object('btaylor')\n\n  # Pages: https://graph.facebook.com/cocacola
  (Coca-Cola page)\n  FGraph.object('cocacola')\n\n  # Fields selection with metadata\n
  \ FGraph.object('btaylor', :fields => 'id,name,picture', :metadata => 1)\n\n  #
  Page photos\n  FGraph.object('/cocacola/photos')\n  FGraph.object_photos('cocacola')\n
  \ \n  # Passing object hash as id\n  friend = { 'name' => 'Mark Zuckerberg', 'id'
  => '4'}\n  friend_details = FGraph.object(friend)\n\n  # Current user: https://graph.facebook.com/me?access_token=...\n
  \ FGraph.me(:access_token => '...')\n\n  # Current user's friends: https://graph.facebook.com/me/friends?access_token=...\n
  \ FGraph.me('friends', :access_token => '...')\n  FGraph.me_friends(:access_token
  => '...')\n\n=== Multiple objects query\n\n  # Multiple users select: https://graph.facebook.com?ids=arjun,vernal\n
  \ FGraph.objects('arjun', 'herryanto')\n\n  # Filter fields: https://graph.facebook.com?ids=arjun,vernal&fields=id,name,picture\n
  \ FGraph.objects('arjun', 'herryanto', :fields => 'id,name,picture')\n  \n  # Passing
  hash objects\n  FGraph.objects([{:name => 'Arjun Banker', :id => 'arjun'}, {:name
  => 'Herryanto Siatono', :id => 'herryanto'}])\n\n=== Collection Response\n  \n  friends
  = FGraph.me_friends(:limit => 5, :access_token => '...')\n  friends.each do |friend|\n
  \   puts friend['name']\n    puts friend['id']\n  end\n  \n  # Other convenient
  methods\n  friends.next?\n  friends.next_url\n  friends.next_options\n  \n=== OAuth\n\nOAuth
  authorization URL:\n  # https://graph.facebook.com/oauth/authorize?\n  #   client_id=...&\n
  \ #   redirect_uri=http://www.example.com/oauth_redirect&\n  #   scope=publish_stream\n
  \ FGraph.oauth_authorize_url('[client id]', 'http://www.example.com/oauth_redirect',
  :scope => \n    'publish_stream')\n\nOAuth Access Token:\n  # https://graph.facebook.com/oauth/access_token?\n
  \ #   client_id=...&\n  #   client_secret=...&\n  #   redirect_uri=http://www.example.com/oauth_redirect&\n
  \ #   code=...\n  FGraph.oauth_access_token('[client id]', '[client secret]', \n
  \    :redirect_uri => ''http://www.example.com/oauth_redirect', \n     :code =>
  '[authorization code]')\n\nOAuth Application Access Token, required to access application
  anlytics data:\n  # https://graph.facebook.com/oauth/access_token?\n  #   client_id=...&\n
  \ #   client_secret=...&\n  #   type=client_cred\n  FGraph.oauth_access_token('[client
  id]', '[client secret]', :type => 'client_cred')\n\n=== Publish to Facebook Graph\n\n
  \ # Post to user's feed.\n  #   curl -F 'access_token=...' \\\n  #     -F 'message=Hello,
  Arjun. I like this new API.' \\\n  #     https://graph.facebook.com/arjun/feed\n
  \ FGraph.publish('arjun/feed', :message => 'Hello, Arjun. I like this n  ew API.',
  \n    :access_token => '...')\n  FGraph.publish_feed('arjun', :message => '...',
  :access_token => '...  ')\n  FGraph.publish_feed('me', :message => '...', :access_token
  => '...')\n\n=== Remove from Facebook Graph\n\n  # DELETE https://graph.facebook.com/ID?access_token=...
  HTTP/1.1\n  FGraph.remove('[ID]')\n  FGraph.remove('[ID]/likes')\n  FGraph.remove_likes('[ID]')\n\n===
  Search\n\n  # https://graph.facebook.com/search?q=watermelon&type=post\n  FGraph.search('watermelon',
  :type => 'post')\n  FGraph.search_post('watermelon')\n\n=== Insights\n\n  # https://graph.facebook.com/client_id/insights?access_token=...\n
  \ FGraph.insights('[client_id]', '[app_access_token]')\n\n  # https://graph.facebook.com/client_id/insights/application_api_call/day?access_token=...\n
  \ FGraph.insights('[client_id]', '[app_access_token]', :metric_path => 'application_api_call/day')\n\n===
  FGraph::Client\n  \n  # Initialize with default options\n  fg_client = FGraph::Client.new(:client_id
  => '...', :client_secret => '...')\n  fg_client.oauth_authorize_url('[redirect uri]',
  :scope => 'publish_stream')\n  fg_client.oauth_access_token('[redirect uri]', '[authorization
  code]')\n    \n  # Intialize with access token\n  fg_client = FGraph::Client.new(:access_token
  => '...')\n  fg_client.me\n  fg.client.publish_feed('herryanto', :message => 'Cool!')\n\n===
  Pagination Options\n\n* limit - max no of records\n* offset - offset\n* until -
  since (a unix timestamp or any date accepted by strtotime, e.g. yesterday)\n\n===
  Rails Helper\n\nSample codes:\n\n  <%= fgraph_javascript_init_tag %>\n  <script
  type=\"text/javascript\">\n    FB.Event.subscribe('auth.sessionChange', function(response)
  {\n      if (response.session) {\n        // A user has logged in, and a new cookie
  has been saved\n      } else {\n        // The user has logged out, and the cookie
  has been cleared\n      }\n    });\n  </script>\n  \n  <!-- Facebook Login Button
  -->\n  <fb:login-button autologoutlink=\"true\" perms=\"email,publish_stream\"></fb:login-button>\n
  \ \n  <% if fgraph_logged_in? %>\n    <br>Hello <%= fgraph_user['name'] %>,\n    <br><%=
  fgraph_image_tag(fgraph_user, 'large') %>\n  <% end %>\n\nFor Asynchronous load,
  use window.afterFbAsyncInit:\n\n  <script type=\"text/javascript\">\n    window.afterFbAsyncInit
  = function() {\n      FB.Event.subscribe('auth.sessionChange', function(response)
  {\n        if (response.session) {\n          // A user has logged in, and a new
  cookie has been saved\n        } else {\n          // The user has logged out, and
  the cookie has been cleared\n        }\n      });\n    }\n  </script>\n  <%= fgraph_javascript_init_tag
  :async => true %>\n  \nFacebook invalidates session token when you log out from
  facebook.com, \nand fgraph_logged_in? does not check if the session is still valid
  \non Facebook server. The trick is you have to catch FGraph::OAuthError \nin ApplicationController:
  \n\n  rescue_from FGraph::OAuthError do\n    # Delete existing invalid cookies\n
  \   cookies.delete \"fbs_#{FGraph.config['app_id']}\"\n    \n    # Redirect to referrer
  page\n    redirect_to request.env['REQUEST_PATH']\n  end"
