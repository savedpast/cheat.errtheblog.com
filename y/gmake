---
gmake: ! "From GNU make manual for version 3.81\r\r###############################################################################\rSummary:\r###############################################################################\rMake
  processes makefiles.  Makefiles consist of macro definitions and rules.\rStandard
  names for makefiles are GMakefile, Makefile, and makefile located in the same directory
  as where invoked.\r\rComments begin with a hash mark (#) and extend to the end of
  the line\r\rTab characters (shown as <TAB> in this document) are significant and
  required in make.\r\rRules are of the format:\r\r  TARGET(s): PREREQUISITE(s)\r
  \ <TAB>COMMAND(s)\r\rTargets are either filenames (possibly including a relative
  directory path prefix), pseudo-targets or special targets.\r\r###############################################################################\rEXAMPLE\r###############################################################################\r.PHONY:
  All Clean\r\rAll: program.exe\r\rprogram.exe: program.c\r<TAB>g++ -o $@ $<\r\rClean:\r<TAB>rm
  -fr program.o program.exe\r\r###############################################################################\rDirectives:\r###############################################################################\r\rdefine
  variable\rendef\r  Defines a multi-line, recursively-expanded variable. See Section
  5.8 [Sequences], page 55.\r\rifdef variable\rifndef variable\rifeq (a,b )\rifeq
  \"a \" \"b \"\rifeq 'a ' 'b '\rifneq (a,b )\rifneq \"a \" \"b \"\rifneq 'a ' 'b
  '\relse\rendif\r  Conditionally evaluate part of the makefile.\r  See Chapter 7
  [Conditionals], page 71.\r\rinclude file\r-include file\rsinclude file\r  Include
  another makefile.\r  See Section 3.3 [Including Other Makefiles], page 12.\r\roverride
  variable = value\roverride variable := value\roverride variable += value\roverride
  variable ?= value\roverride define variable\rendef\r  Define a variable, overriding
  any previous definition, even one from the command line.\r  See Section 6.7 [The
  override Directive], page 65.\r\rexport\r  Tell make to export all variables to
  child processes by default.\r  See Section 5.7.2 [Communicating Variables to a Sub-make],
  page 51.\r\rexport variable\rexport variable = value\rexport variable := value\rexport
  variable += value\rexport variable ?= value\runexport variable\r  Tell make whether
  or not to export a particular variable to child processes.\r  See Section 5.7.2
  [Communicating Variables to a Sub-make], page 51.\r\rvpath pattern path\r  Specify
  a search path for files matching a '%' pattern.\r  See Section 4.4.2 [The vpath
  Directive], page 27.\r\rvpath pattern\r  Remove all search paths previously specified
  for pattern.\rvpath\r  Remove all search paths previously specified in any vpath
  directive.\r\r###############################################################################\rBuilt-in
  functions (see Chapter 8 [Functions], page 77):\r###############################################################################\r\r$(subst
  from,to,text )\r  Replace from with to in text.  See Section 8.2 [Functions for
  String Substitution and Analysis], page 78.\r\r$(patsubst pattern,replacement,text
  )\r  Replace words matching pattern with replacement in text.  See Section 8.2 [Functions
  for String Substitution and Analysis], page 78.\r\r$(strip string )\r  Remove excess
  whitespace characters from string.  See Section 8.2 [Functions for String Substitution
  and Analysis], page 78.\r\r$(findstring find,text )\r  Locate find in text.  See
  Section 8.2 [Functions for String Substitution and Analysis], page 78.\r\r$(filter
  pattern ...,text )\r  Select words in text that match one of the pattern words.
  \ See Section 8.2 [Functions for String Substitution and Analysis], page 78.\r\r$(filter-out
  pattern ...,text )\r  Select words in text that do not match any of the pattern
  words.  See Section 8.2 [Functions for String Substitution and Analysis], page 78.\r\r$(sort
  list )\r  Sort the words in list lexicographically, removing duplicates.  See Section
  8.2 [Functions for String Substitution and Analysis], page 78.\r\r$(word n,text
  )\r  Extract the nth word (one-origin) of text.  See Section 8.2 [Functions for
  String Substitution and Analysis], page 78.\r\r$(words text )\r  Count the number
  of words in text.  See Section 8.2 [Functions for String Substitution and Analysis],
  page 78.\r\r$(wordlist s,e,text )\r  Returns the list of words in text from s to
  e.  See Section 8.2 [Functions for String Substitution and Analysis], page 78.\r\r$(firstword
  names ...)\r  Extract the first word of names.  See Section 8.2 [Functions for String
  Substitution and Analysis], page 78.\r\r$(lastword names ...)\r  Extract the last
  word of names.  See Section 8.2 [Functions for String Substitution and Analysis],
  page 78.\r\r$(dir names ...)\r  Extract the directory part of each file name.  See
  Section 8.3 [Functions for File Names], page 81.\r\r$(notdir names ...)\r  Extract
  the non-directory part of each file name.  See Section 8.3 [Functions for File Names],
  page 81.\r\r$(suffix names ...)\r  Extract the suffix (the last '.' and following
  characters) of each file name.  See Section 8.3 [Functions for File Names], page
  81.\r\r$(basename names ...)\r  Extract the base name (name without suffix) of each
  file name.  See Section 8.3 [Functions for File Names], page 81.\r\r$(addsuffix
  suffix,names ...)\r  Append suffix to each word in names.  See Section 8.3 [Functions
  for File Names], page 81.\r\r$(addprefix prefix,names ...)\r  Prepend prefix to
  each word in names.  See Section 8.3 [Functions for File Names], page 81.\r\r$(join
  list1,list2 )\r  Join two parallel lists of words.  See Section 8.3 [Functions for
  File Names], page 81.\r\r$(wildcard pattern ...)\r  Find file names matching a shell
  file name pattern (not a '%' pattern).  See Section 4.3.3 [The Function wildcard],
  page 26.\r\r$(realpath names ...)\r  For each file name in names, expand to an absolute
  name that does not contain any ., .., nor symlinks.  See Section 8.3 [Functions
  for File Names], page 81.\r\r$(abspath names ...)\r  For each file name in names,
  expand to an absolute name that does not contain any . or .. components, but preserves
  symlinks.  See Section 8.3 [Functions for File Names], page 81.\r\r$(error text
  ...)\r  When this function is evaluated, make generates a fatal error with the message
  text.  See Section 8.12 [Functions That Control Make], page 90.\r\r$(warning text
  ...)\r  When this function is evaluated, make generates a warning with the message
  text.  See Section 8.12 [Functions That Control Make], page 90.\r\r$(shell command
  )\r  Execute a shell command and return its output.  See Section 8.11 [The shell
  Function], page 89.\r\r$(origin variable )\r  Return a string describing how the
  make variable variable was defined.  See Section 8.9 [The origin Function], page
  87.\r\r$(flavor variable )\r  Return a string describing the flavor of the make
  variable variable.  See Section 8.10 [The flavor Function], page 89.\r\r$(foreach
  var,words,text )\r  Evaluate text with var bound to each word in words, and concatenate
  the results.  See Section 8.5 [The foreach Function], page 84.\r\r$(call var,param,...)\r
  \ Evaluate the variable var replacing any references to $(1), $(2) with the first,
  second, etc. param values.  See Section 8.6 [The call Function], page 85.\r\r$(eval
  text )\r  Evaluate text then read the results as makefile commands. Expands to the
  empty string.  See Section 8.8 [The eval Function], page 86.\r\r$(value var )\r
  \ Evaluates to the contents of the variable var, with no expansion performed on
  it.  See Section 8.7 [The value Function], page 86.\r\r###############################################################################\rAutomatic
  variables. See Section 10.5.3 [Automatic Variables], page 110, for full information.\r###############################################################################\r\r$@\r
  \ The file name of the target.\r\r$%\r  The target member name, when the target
  is an archive member.\r\r$<\r  The name of the first prerequisite.\r\r$?\r  The
  names of all the prerequisites that are newer than the target, with spaces between
  them. For prerequisites which are archive members, only the member named is used
  (see Chapter 11 [Archives], page 119).\r\r$^\r$+\r  The names of all the prerequisites,
  with spaces between them. For prerequisites which are archive members, only the
  member named is used (see Chapter 11 [Archives], page 119). The value of $^ omits
  duplicate prerequisites, while $+ retains them and preserves their order.  The stem
  with which an implicit rule matches (see Section 10.5.4 [How Patterns Match], page
  112).\r\r$*\r$(@D)\r$(@F)\r  The directory part and the file-within-directory part
  of $@.\r\r$(*D)\r$(*F)\r  The directory part and the file-within-directory part
  of $*.\r\r$(%D)\r$(%F)\r  The directory part and the file-within-directory part
  of $%.\r\r$(<D)\r$(<F)\r  The directory part and the file-within-directory part
  of $<.\r\r$(^D)\r$(^F)\r  The directory part and the file-within-directory part
  of $^.\r\r$(+D)\r$(+F)\r  The directory part and the file-within-directory part
  of $+.\r\r$(?D)\r$(?F)\r  The directory part and the file-within-directory part
  of $?.\r\r###############################################################################\rVariables
  are used specially by GNU make:\r###############################################################################\r\rMAKEFILES\r
  \ Makefiles to be read on every invocation of make.  See Section 3.4 [The Variable
  MAKEFILES], page 13.\r\rVPATH\r  Directory search path for files not found in the
  current directory. See Section 4.4.1 [VPATH Search Path for All Prerequisites],
  page 27.\r\rSHELL\r  The name of the system default command interpreter, usually
  '/bin/sh'. You can set SHELL in the makefile to change the shell used to run commands.
  See Section 5.3 [Command Execution], page 46. The SHELL variable is handled specially
  when importing from and exporting to the environment. See Section 5.3.1 [Choosing
  the Shell], page 46.\r\rMAKESHELL\r  On MS-DOS only, the name of the command interpreter
  that is to be used by make. This value takes precedence over the value of SHELL.
  See Section 5.3 [MAKESHELL variable], page 46.\r\rMAKE\r  The name with which make
  was invoked. Using this variable in commands has special meaning. See Section 5.7.1
  [How the MAKE Variable Works], page 50.\r\rMAKELEVEL\r  The number of levels of
  recursion (sub-makes).  See Section 5.7.2 [Variables/Recursion], page 51.\r\rMAKEFLAGS\r
  \ The flags given to make. You can set this in the environment or a makefile to
  set flags.  See Section 5.7.3 [Communicating Options to a Sub-make], page 53.  It
  is never appropriate to use MAKEFLAGS directly on a command line: its contents may
  not be quoted correctly for use in the shell. Always allow recursive make's to obtain
  these values through the environment from its parent.\r\rMAKECMDGOALS\r  The targets
  given to make on the command line. Setting this variable has no effect on the operation
  of make.  See Section 9.2 [Arguments to Specify the Goals], page 91.\r\rCURDIR\r
  \ Set to the pathname of the current working directory (after all -C options are
  processed, if any). Setting this variable has no effect on the operation of make.
  \ See Section 5.7 [Recursive Use of make], page 50.\r\rSUFFIXES\r  The default list
  of suffixes before make reads any makefiles.\r\r.LIBPATTERNS\r  Defines the naming
  of the libraries make searches for, and their order.  See Section 4.4.6 [Directory
  Search for Link Libraries], page 30.\r\r###############################################################################\rBuilt-in
  targets\r###############################################################################\r\r.SUFFIXES:\r
  \ The list of suffixes to be used in checking for suffix rules. See Section 10.7
  [Old Fashioned Suffix Rules].\r\r.DEFAULT_GOAL:\r  Sets the goal to be used if no
  targets were specified on the command-line.\r\r.DEFAULT:\r  Commands to be used
  for a any target for which no rules are found.\r\r.PHONY:\r  Specifies the list
  of pseudo-targets.\r\r.PRECIOUS:\r  If make is killed or interrupted during execution,
  these prerequisites will not be deleted.\r\r.INTERMEDIATE:\r  Lists targets which
  are intermediate files and subject to deletion.\r\r.SECONDARY:\r  List intermediate
  targets that are never deleted.\r\r.SECONDEXPANSION:\r  All prerequisite lists defined
  after this will be expanded a second time after all makefiles have been read in.\r\r.DELETE_ON_ERROR:\r
  \ prerequisite files defined after this whose target commands return an error will
  be deleted\r\r.IGNORE:\r  cause all errors during command execution to be ignored\r\r.LOW_RESOLUTION_TIME:\r
  \ uses a lower resolution timestamp for determining when files are out-of-date\r\r.SILENT:\r
  \ suppresses printing commands before executing them\r\r.EXPORT_ALL_VARIABLES:\r
  \ Causes all make variables to be exported to child processes (i.e. in commands)\r\r.NOTPARALLEL:\r
  \         Forces serial execution even though -j is specified\r\r###############################################################################\rEOF"
