---
aruba_step_definitions: ! "# Aruba\r\n# see: https://github.com/aslakhellesoy/aruba/blob/master/lib/aruba/cucumber.rb\r\n\r\nGiven
  /^I'm using a clean gemset \"([^\"]*)\"$/ do |gemset|\r\n  use_clean_gemset(gemset)\r\nend\r\n\r\nGiven
  /^a directory named \"([^\"]*)\"$/ do |dir_name|\r\n  create_dir(dir_name)\r\nend\r\n\r\nGiven
  /^a file named \"([^\"]*)\" with:$/ do |file_name, file_content|\r\n  write_file(file_name,
  file_content)\r\nend\r\n\r\nGiven /^an empty file named \"([^\"]*)\"$/ do |file_name|\r\n
  \ write_file(file_name, \"\")\r\nend\r\n\r\nWhen /^I write to \"([^\"]*)\" with:$/
  do |file_name, file_content|\r\n  write_file(file_name, file_content)\r\nend\r\n\r\nWhen
  /^I overwrite \"([^\"]*)\" with:$/ do |file_name, file_content|\r\n  overwrite_file(file_name,
  file_content)\r\nend\r\n\r\nWhen /^I append to \"([^\"]*)\" with:$/ do |file_name,
  file_content|\r\n  append_to_file(file_name, file_content)\r\nend\r\n\r\nWhen /^I
  remove the file \"([^\"]*)\"$/ do |file_name|\r\n  remove_file(file_name)\r\nend\r\n\r\nWhen
  /^I cd to \"([^\"]*)\"$/ do |dir|\r\n  cd(dir)\r\nend\r\n\r\nWhen /^I run \"(.*)\"$/
  do |cmd|\r\n  run_simple(unescape(cmd), false)\r\nend\r\n\r\nWhen /^I successfully
  run \"(.*)\"$/ do |cmd|\r\n  run_simple(unescape(cmd))\r\nend\r\n\r\nWhen /^I run
  \"([^\"]*)\" interactively$/ do |cmd|\r\n  run_interactive(unescape(cmd))\r\nend\r\n\r\nWhen
  /^I type \"([^\"]*)\"$/ do |input|\r\n  type(input)\r\nend\r\n\r\nThen /^the output
  should contain \"([^\"]*)\"$/ do |partial_output|\r\n  assert_partial_output(partial_output)\r\nend\r\n\r\nThen
  /^the output from \"([^\"]*)\" should contain \"([^\"]*)\"$/ do |cmd, partial_output|\r\n
  \ output_from(cmd).should include(partial_output)\r\nend\r\n\r\nThen /^the output
  from \"([^\"]*)\" should not contain \"([^\"]*)\"$/ do |cmd, partial_output|\r\n
  \ output_from(cmd).should_not include(partial_output)\r\nend\r\n\r\nThen /^the output
  should not contain \"([^\"]*)\"$/ do |partial_output|\r\n  all_output.should_not
  include(partial_output)\r\nend\r\n\r\nThen /^the output should contain:$/ do |partial_output|\r\n
  \ all_output.should include(partial_output)\r\nend\r\n\r\nThen /^the output should
  not contain:$/ do |partial_output|\r\n  all_output.should_not include(partial_output)\r\nend\r\n\r\nThen
  /^the output should contain exactly \"([^\"]*)\"$/ do |exact_output|\r\n  all_output.should
  == exact_output\r\nend\r\n\r\nThen /^the output should contain exactly:$/ do |exact_output|\r\n
  \ all_output.should == exact_output\r\nend\r\n\r\n# \"the output should match\"
  allows regex in the partial_output, if\r\n# you don't need regex, use \"the output
  should contain\" instead since\r\n# that way, you don't have to escape regex characters
  that\r\n# appear naturally in the output\r\nThen /^the output should match \\/([^\\/]*)\\/$/
  do |partial_output|\r\n  all_output.should =~ /#{partial_output}/\r\nend\r\n \r\nThen
  /^the output should match:$/ do |partial_output|\r\n  all_output.should =~ /#{partial_output}/m\r\nend\r\n\r\nThen
  /^the exit status should be (\\d+)$/ do |exit_status|\r\n  @last_exit_status.should
  == exit_status.to_i\r\nend\r\n\r\nThen /^the exit status should not be (\\d+)$/
  do |exit_status|\r\n  @last_exit_status.should_not == exit_status.to_i\r\nend\r\n\r\nThen
  /^it should (pass|fail) with:$/ do |pass_fail, partial_output|\r\n  self.__send__(\"assert_#{pass_fail}ing_with\",
  partial_output)\r\nend\r\n\r\nThen /^it should (pass|fail) with exactly:$/ do |pass_fail,
  exact_output|\r\n  assert_exit_status_and_output(pass_fail == \"pass\", exact_output,
  true)\r\nend\r\n\r\nThen /^it should (pass|fail) with regexp?:$/ do |pass_fail,
  partial_output|\r\n  Then \"the output should match:\", partial_output\r\n  if pass_fail
  == 'pass'\r\n    @last_exit_status.should == 0\r\n  else\r\n    @last_exit_status.should_not
  == 0\r\n  end\r\nend\r\n\r\nThen /^the stderr should contain \"([^\"]*)\"$/ do |partial_output|\r\n
  \ all_stderr.should include(partial_output)\r\nend\r\n\r\nThen /^the stderr should
  contain:$/ do |partial_output|\r\n  all_stderr.should include(partial_output)\r\nend\r\n\r\nThen
  /^the stderr should contain exactly:$/ do |exact_output|\r\n  all_stderr.should
  == exact_output\r\nend\r\n\r\nThen /^the stdout should contain \"([^\"]*)\"$/ do
  |partial_output|\r\n  all_stdout.should include(partial_output)\r\nend\r\n\r\nThen
  /^the stdout should contain:$/ do |partial_output|\r\n  all_stdout.should include(partial_output)\r\nend\r\n\r\nThen
  /^the stdout should contain exactly:$/ do |exact_output|\r\n  all_stdout.should
  == exact_output\r\nend\r\n\r\nThen /^the stderr should not contain \"([^\"]*)\"$/
  do |partial_output|\r\n  all_stderr.should_not include(partial_output)\r\nend\r\n\r\nThen
  /^the stderr should not contain:$/ do |partial_output|\r\n  all_stderr.should_not
  include(partial_output)\r\nend\r\n\r\nThen /^the stdout should not contain \"([^\"]*)\"$/
  do |partial_output|\r\n  all_stdout.should_not include(partial_output)\r\nend\r\n\r\nThen
  /^the stdout should not contain:$/ do |partial_output|\r\n  all_stdout.should_not
  include(partial_output)\r\nend\r\n\r\nThen /^the stdout from \"([^\"]*)\" should
  contain \"([^\"]*)\"$/ do |cmd, partial_output|\r\n  stdout_from(cmd).should include(partial_output)\r\nend\r\n\r\nThen
  /^the stdout from \"([^\"]*)\" should not contain \"([^\"]*)\"$/ do |cmd, partial_output|\r\n
  \ stdout_from(cmd).should_not include(partial_output)\r\nend\r\n\r\nThen /^the stderr
  from \"([^\"]*)\" should contain \"([^\"]*)\"$/ do |cmd, partial_output|\r\n  stderr_from(cmd).should
  include(partial_output)\r\nend\r\n\r\nThen /^the stderr from \"([^\"]*)\" should
  not contain \"([^\"]*)\"$/ do |cmd, partial_output|\r\n  stderr_from(cmd).should_not
  include(partial_output)\r\nend\r\n\r\nThen /^the file \"([^\"]*)\" should not exist$/
  do |file_name|\r\n  check_file_presence([file_name], false)\r\nend\r\n\r\nThen /^the
  following files should exist:$/ do |files|\r\n  check_file_presence(files.raw.map{|file_row|
  file_row[0]}, true)\r\nend\r\n\r\nThen /^the following files should not exist:$/
  do |files|\r\n  check_file_presence(files.raw.map{|file_row| file_row[0]}, false)\r\nend\r\n\r\nThen
  /^a file named \"([^\"]*)\" should exist$/ do |file|\r\n  check_file_presence([file],
  true)\r\nend\r\n\r\nThen /^a file named \"([^\"]*)\" should not exist$/ do |file|\r\n
  \ check_file_presence([file], false)\r\nend\r\n\r\nThen /^the following directories
  should exist:$/ do |directories|\r\n  check_directory_presence(directories.raw.map{|directory_row|
  directory_row[0]}, true)\r\nend\r\n\r\nThen /^the following directories should not
  exist:$/ do |directories|\r\n  check_directory_presence(directories.raw.map{|directory_row|
  directory_row[0]}, false)\r\nend\r\n\r\nThen /^a directory named \"([^\"]*)\" should
  exist$/ do |directory|\r\n  check_directory_presence([directory], true)\r\nend\r\n\r\nThen
  /^a directory named \"([^\"]*)\" should not exist$/ do |directory|\r\n  check_directory_presence([directory],
  false)\r\nend\r\n\r\nThen /^the file \"([^\"]*)\" should contain \"([^\"]*)\"$/
  do |file, partial_content|\r\n  check_file_content(file, partial_content, true)\r\nend\r\n\r\nThen
  /^the file \"([^\"]*)\" should not contain \"([^\"]*)\"$/ do |file, partial_content|\r\n
  \ check_file_content(file, partial_content, false)\r\nend\r\n\r\nThen /^the file
  \"([^\"]*)\" should contain exactly:$/ do |file, exact_content|\r\n  check_exact_file_content(file,
  exact_content)\r\nend\r\n\r\nThen /^the file \"([^\"]*)\" should match \\/([^\\/]*)\\/$/
  do |file, partial_content|\r\n  check_file_content(file, /#{partial_content}/, true)\r\nend\r\n\r\nThen
  /^the file \"([^\"]*)\" should not match \\/([^\\/]*)\\/$/ do |file, partial_content|\r\n
  \ check_file_content(file, /#{partial_content}/, false)\r\nend\r\n"
