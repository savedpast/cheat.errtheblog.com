---
redis: ! "Redis Command Reference\nhttp://code.google.com/p/redis/wiki/CommandReference\n\n##Connection
  handling\n\nQUIT close the connection\n\nAUTH simple password authentication if
  enabled\n\n\n##All Values\n\nEXISTS\n  key test if a key exists\n\nDEL\n  key delete
  a key\n\nTYPE\n  key return the type of the value stored at key\n\nKEYS\n  pattern
  return all the keys matching a given pattern\n\nRANDOMKEY\n  return a random key
  from the key space\n\nRENAME\n  oldname newname rename the old key in the new one,
  destroing the newname key if it already exists\n\nRENAMENX\n  oldname newname rename
  the old key in the new one, if the newname key does not already exist\n\nDBSIZE\n
  \ return the number of keys in the current db\n\nEXPIRE\n  set a time to live in
  seconds on a key\n\nTTL\n  get the time to live in seconds of a key\n\nSELECT\n
  \ index Select the DB having the specified index\n\nMOVE\n  key dbindex Move the
  key from the currently selected DB to the DB having as index dbindex\n\nFLUSHDB\n
  \ Remove all the keys of the currently selected DB\n\nFLUSHALL\n  Remove all the
  keys from all the databases\n\n\n##Strings\n\nSET\n  key value set a key to a string
  value\n\nGET\n  key return the string value of the key\n\nGETSET\n  key value set
  a key to a string returning the old value of the key\n\nMGET\n  key1 key2 ... keyN
  multi-get, return the strings values of the keys\n\nSETNX\n  key value set a key
  to a string value if the key does not exist\n\nSETEX\n  key time value Set+Expire
  combo command\n\nMSET\n  key1 value1 key2 value2 ... keyN valueN set a multiple
  keys to multiple values in a single atomic operation\n\nMSETNX\n  key1 value1 key2
  value2 ... keyN valueN set a multiple keys to multiple values in a single atomic
  operation if none of the keys already exist\n\nINCR\n  key increment the integer
  value of key\n\nINCRBY\n  key integer increment the integer value of key by integer\n\nDECR\n
  \ key decrement the integer value of key\n\nDECRBY\n  key integer decrement the
  integer value of key by integer\n\n\n##Lists\n\nRPUSH\n  key value Append an element
  to the tail of the List value at key\n\nLPUSH\n  key value Append an element to
  the head of the List value at key\n\nLLEN\n  key Return the length of the List value
  at key\n\nLRANGE\n  key start end Return a range of elements from the List at key\n\nLTRIM\n
  \ key start end Trim the list at key to the specified range of elements\n\nLINDEX\n
  \ key index Return the element at index position from the List at key\n\nLSET\n
  \ key index value Set a new value as the element at index position of the List at
  key\n\nLREM\n  key count value Remove the first-N, last-N, or all the elements matching
  value from the List at key\n\nLPOP\n  key Return and remove (atomically) the first
  element of the List at key\n\nRPOP\n  key Return and remove (atomically) the last
  element of the List at key\n\nBLPOP\n  key1 key2 ... keyN timeout Blocking LPOP\n\nBRPOP\n
  \ key1 key2 ... keyN timeout Blocking RPOP\n\nRPOPLPUSH\n  srckey dstkey Return
  and remove (atomically) the last element of the source List stored at _srckey_ and
  push the same element to the destination List stored at _dstkey_\n\n\n##Sets\n\nSADD\n
  \ key member Add the specified member to the Set value at key\n\nSREM\n  key member
  Remove the specified member from the Set value at key\n\nSPOP\n  key Remove and
  return (pop) a random element from the Set value at key\n\nSMOVE\n  srckey dstkey
  member Move the specified member from one Set to another atomically\n\nSCARD\n  key
  Return the number of elements (the cardinality) of the Set at key\n\nSISMEMBER\n
  \ key member Test if the specified value is a member of the Set at key\n\nSINTER\n
  \ key1 key2 ... keyN Return the intersection between the Sets stored at key1, key2,
  ..., keyN\n\nSINTERSTORE\n  dstkey key1 key2 ... keyN Compute the intersection between
  the Sets stored at key1, key2, ..., keyN, and store the resulting Set at dstkey\n\nSUNION\n
  \ key1 key2 ... keyN Return the union between the Sets stored at key1, key2, ...,
  keyN\n\nSUNIONSTORE\n  dstkey key1 key2 ... keyN Compute the union between the Sets
  stored at key1, key2, ..., keyN, and store the resulting Set at dstkey\n\nSDIFF\n
  \ key1 key2 ... keyN Return the difference between the Set stored at key1 and all
  the Sets key2, ..., keyN\n\nSDIFFSTORE\n  dstkey key1 key2 ... keyN Compute the
  difference between the Set key1 and all the Sets key2, ..., keyN, and store the
  resulting Set at dstkey\n\nSMEMBERS\n  key Return all the members of the Set value
  at key\n\nSRANDMEMBER\n  key Return a random member of the Set value at key\n\n\n##Sorted
  sets (zsets, Redis version >= 1.1)\n\nZADD\n  key score member Add the specified
  member to the Sorted Set value at key or update the score if it already exist\n\nZREM\n
  \ key member Remove the specified member from the Sorted Set value at key\n\nZINCRBY\n
  \ key increment member If the member already exists increment its score by _increment_,
  otherwise add the member setting _increment_ as score\n\nZRANK\n  key member Return
  the rank (or index) or _member_ in the sorted set at _key_, with scores being ordered
  from low to high\n\nZREVRANK\n  key member Return the rank (or index) or _member_
  in the sorted set at _key_, with scores being ordered from high to low\n\nZRANGE\n
  \ key start end Return a range of elements from the sorted set at key\n\nZREVRANGE\n
  \ key start end Return a range of elements from the sorted set at key, exactly like
  ZRANGE, but the sorted set is ordered in traversed in reverse order, from the greatest
  to the smallest score\n\nZRANGEBYSCORE\n  key min max Return all the elements with
  score >= min and score <= max (a range query) from the sorted set\n\nZCARD\n  key
  Return the cardinality (number of elements) of the sorted set at key\n\nZSCORE\n
  \ key element Return the score associated with the specified element of the sorted
  set at key\n\nZREMRANGEBYRANK\n  key min max Remove all the elements with rank >=
  min and rank <= max from the sorted set\n\nZREMRANGEBYSCORE\n  key min max Remove
  all the elements with score >= min and score <= max from the sorted set\n\nZUNION/ZINTER\n
  \ dstkey N key1 ... keyN WEIGHTS w1 ... wN AGGREGATE SUM|MIN|MAX Perform a union
  or intersection over a number of sorted sets with optional weight and aggregate\n\n\n##Hashes\n\nHSET\n
  \ key field value Set the hash field to the specified value. Creates the hash if
  needed.\n\nHGET\n  key field Retrieve the value of the specified hash field.\n\nHMSET\n
  \ key field1 value1 ... fieldN valueN Set the hash fields to their respective values.\n\nHINCRBY\n
  \ key field integer Increment the integer value of the hash at _key_ on _field_
  with _integer_.\n\nHEXISTS\n  key field Test for existence of a specified field
  in a hash\n\nHDEL\n  key field Remove the specified field from a hash\n\nHLEN\n
  \ key Return the number of items in a hash.\n\nHKEYS\n  key Return all the fields
  in a hash.\n\nHVALS\n  key Return all the values in a hash.\n\nHGETALL\n  key Return
  all the fields and associated values in a hash.\n\n\n##Sorting\n\nSORT\n  key BY
  pattern LIMIT start end GET pattern ASC|DESC ALPHA Sort a Set or a List accordingly
  to the specified parameters\n\n\n##Transactions\n\nMULTI/EXEC/DISCARD\n  Redis atomic
  transactions\n\n\n##Publish/Subscribe\n\nSUBSCRIBE/UNSUBSCRIBE/PUBLISH\n  Redis
  Public/Subscribe messaging paradigm implementation\n\n\n##Persistence control\n\nSAVE\n
  \ Synchronously save the DB on disk\n\nBGSAVE\n  Asynchronously save the DB on disk\n\nLASTSAVE\n
  \ Return the UNIX time stamp of the last successfully saving of the dataset on disk\n\nSHUTDOWN\n
  \ Synchronously save the DB on disk, then shutdown the server\n\nBGREWRITEAOF\n
  \ Rewrite the append only file in background when it gets too big\n\n\n##Remote
  server control\n\nINFO\n  Provide information and statistics about the server\n\nMONITOR\n
  \ Dump all the received requests in real time\n\nSLAVEOF\n  Change the replication
  settings"
